<?php/*** 2007-2015 PrestaShop** NOTICE OF LICENSE** This source file is subject to the Academic Free License (AFL 3.0)* that is bundled with this package in the file LICENSE.txt.* It is also available through the world-wide-web at this URL:* http://opensource.org/licenses/afl-3.0.php* If you did not receive a copy of the license and are unable to* obtain it through the world-wide-web, please send an email* to license@prestashop.com so we can send you a copy immediately.** DISCLAIMER** Do not edit or add to this file if you wish to upgrade PrestaShop to newer* versions in the future. If you wish to customize PrestaShop for your* needs please refer to http://www.prestashop.com for more information.**  @author    PrestaShop SA <contact@prestashop.com>*  @copyright 2007-2015 PrestaShop SA*  @license   http://opensource.org/licenses/afl-3.0.php  Academic Free License (AFL 3.0)*  International Registered Trademark & Property of PrestaShop SA*/if (!defined('_PS_VERSION_'))	exit;include_once(_PS_MODULE_DIR_.'paypal/api/paypal_lib.php');include_once(_PS_MODULE_DIR_.'paypal/paypal_logos.php');include_once(_PS_MODULE_DIR_.'paypal/paypal_orders.php');include_once(_PS_MODULE_DIR_.'paypal/paypal_tools.php');include_once(_PS_MODULE_DIR_.'paypal/paypal_login/paypal_login.php');include_once(_PS_MODULE_DIR_.'paypal/paypal_login/PayPalLoginUser.php');include_once(_PS_MODULE_DIR_.'paypal/classes/PaypalCapture.php');define('WPS', 1); //Paypal Integraldefine('HSS', 2); //Paypal Integral Evolutiondefine('ECS', 4); //Paypal Option +define('TRACKING_INTEGRAL_EVOLUTION', 'FR_PRESTASHOP_H3S');define('TRACKING_INTEGRAL', 'PRESTASHOP_EC');define('TRACKING_OPTION_PLUS', 'PRESTASHOP_ECM');define('PAYPAL_HSS_REDIRECTION', 0);define('PAYPAL_HSS_IFRAME', 1);define('TRACKING_EXPRESS_CHECKOUT_SEAMLESS', 'PrestaShopCEMEA_Cart_LIPP');define('TRACKING_CODE', 'FR_PRESTASHOP_H3S');define('SMARTPHONE_TRACKING_CODE', 'Prestashop_Cart_smartphone_EC');define('TABLET_TRACKING_CODE', 'Prestashop_Cart_tablet_EC');define('_PAYPAL_LOGO_XML_', 'logos.xml');define('_PAYPAL_MODULE_DIRNAME_', 'paypal');define('_PAYPAL_TRANSLATIONS_XML_', 'translations.xml');require_once dirname(__FILE__).'/paypalCore.php';class PayPal extends PaypalCore{	protected $_html = '';	public $_errors	= array();	public $context;	public $iso_code;	public $default_country;	public $paypal_logos;	public $module_key = '646dcec2b7ca20c4e9a5aebbbad98d7e';	const BACKWARD_REQUIREMENT = '0.4';	const DEFAULT_COUNTRY_ISO = 'GB';	const ONLY_PRODUCTS	= 1;	const ONLY_DISCOUNTS = 2;	const BOTH = 3;	const BOTH_WITHOUT_SHIPPING	= 4;	const ONLY_SHIPPING	= 5;	const ONLY_WRAPPING	= 6;	const ONLY_PRODUCTS_WITHOUT_SHIPPING = 7;	const INSTALL_SQL_FILE = 'install.sql';		private static $_PAYPAL_FEE_MAX = 0.35;	private static $_PAYPAL_PCTFEE_MAX = 3.4;	protected $aw_key = 'PAYPAL';	public function __construct()	{		$this->name = 'paypal';		$this->tab = 'payments_gateways';		$this->version = '7.4.0.0';		$this->is_eu_compatible = 1;		$this->currencies = true;		$this->currencies_mode = 'radio';		parent::__construct();		$this->displayName = $this->l('PayPal');		$this->description = $this->l('Accepts payments by credit cards (CB, Visa, MasterCard, Amex, Aurore, Cofinoga, 4 stars) with PayPal.');		$this->confirmUninstall = $this->l('Are you sure you want to delete your details?');		$this->page = basename(__FILE__, '.php');		if (version_compare(_PS_VERSION_, '1.5', '<'))		{			$mobile_enabled = (int)Configuration::get('PS_MOBILE_DEVICE');			require(_PS_MODULE_DIR_.$this->name.'/backward_compatibility/backward.php');		}		else			$mobile_enabled = (int)Configuration::get('PS_ALLOW_MOBILE_DEVICE');		if (self::isInstalled($this->name))		{			$this->loadDefaults();			if ($mobile_enabled && $this->active)				$this->checkMobileCredentials();			elseif ($mobile_enabled && !$this->active)				$this->checkMobileNeeds();		}		else			$this->checkMobileNeeds();		$this->ps_versions_compliancy = array('min' => '1.6', 'max' => _PS_VERSION_);		$this->checkInstall();	}	public function install()	{		if(version_compare(_PS_VERSION_, '1.6','<'))			return false;		$this->install_DB();		if (!parent::install() || !$this->registerHook('payment') || !$this->registerHook('displayPaymentEU') || !$this->registerHook('paymentReturn') ||		!$this->registerHook('shoppingCartExtra') || !$this->registerHook('backBeforePayment') || !$this->registerHook('rightColumn') ||		!$this->registerHook('cancelProduct') || !$this->registerHook('productFooter') || !$this->registerHook('header') || !$this->registerHook('footer') ||		!$this->registerHook('adminOrder') || !$this->registerHook('backOfficeHeader') || !$this->registerHook('actionPSCleanerGetModulesTables'))			return false;		if ((_PS_VERSION_ >= '1.5') && (!$this->registerHook('displayMobileHeader') ||		!$this->registerHook('displayMobileShoppingCartTop') || !$this->registerHook('displayMobileAddToCartTop') OR !$this->registerHook('displayOrderDetail')))			return false;		include_once(_PS_MODULE_DIR_.$this->name.'/paypal_install.php');		$paypal_install = new PayPalInstall();		$paypal_install->createTables();		$paypal_install->updateConfiguration($this->version);		$paypal_install->createOrderState();		$paypal_tools = new PayPalTools($this->name);		$paypal_tools->moveTopPayments(1);		$paypal_tools->moveRightColumn(3);		$this->runUpgrades(true);				if (is_writable(_PS_THEME_DIR_))		{			$pdfDir = _PS_THEME_DIR_.'pdf';			//create the new directory			if(!is_dir($pdfDir))			{				$newDir = mkdir($pdfDir, 0777);			}						if(version_compare(_PS_VERSION_, '1.6.1','<'))			{				if(file_exists(_PS_THEME_DIR_.'/pdf/invoice.tpl'))					@copy(_PS_THEME_DIR_.'/pdf/invoice.tpl', _PS_THEME_DIR_.'/pdf/invoice-'.date(Ymd).'.old');				@copy(_PS_MODULE_DIR_.'paypal/themes/pdf/invoice.tpl', _PS_THEME_DIR_.'/pdf/invoice.tpl');				if(file_exists(_PS_THEME_DIR_.'/pdf/invoice.tax-tab.tpl'))					@copy(_PS_THEME_DIR_.'/pdf/invoice.tax-tab.tpl', _PS_THEME_DIR_.'/pdf/invoice.tax-tab-'.date(Ymd).'.old');				@copy(_PS_MODULE_DIR_.'paypal/themes/pdf/invoice.tax-tab.tpl', _PS_THEME_DIR_.'/pdf/invoice.tax-tab.tpl');				if(file_exists(_PS_THEME_DIR_.'/pdf/order-slip.tpl'))					@copy(_PS_THEME_DIR_.'/pdf/order-slip.tpl', _PS_THEME_DIR_.'/pdf/order-slip-'.date(Ymd).'.old');				@copy(_PS_MODULE_DIR_.'paypal/themes/pdf/order-slip.tpl', _PS_THEME_DIR_.'/pdf/order-slip.tpl');			}			else			{				if(file_exists(_PS_THEME_DIR_.'/pdf/invoice.tpl'))					@copy(_PS_THEME_DIR_.'/pdf/invoice.tpl', _PS_THEME_DIR_.'/pdf/invoice-'.date(Ymd).'.old');				@copy(_PS_MODULE_DIR_.'paypal/themes/pdf161/invoice.tpl', _PS_THEME_DIR_.'/pdf/invoice.tpl');				if(file_exists(_PS_THEME_DIR_.'/pdf/invoice.total-tab.tpl'))					@copy(_PS_THEME_DIR_.'/pdf/invoice.total-tab.tpl', _PS_THEME_DIR_.'/pdf/invoice.total-tab-'.date(Ymd).'.old');				@copy(_PS_MODULE_DIR_.'paypal/themes/pdf161/invoice.total-tab.tpl', _PS_THEME_DIR_.'/pdf/invoice.total-tab.tpl');				if(file_exists(_PS_THEME_DIR_.'/pdf/invoice.tax-tab.tpl'))					@copy(_PS_THEME_DIR_.'/pdf/invoice.tax-tab.tpl', _PS_THEME_DIR_.'/pdf/invoice.tax-tab-'.date(Ymd).'.old');				@copy(_PS_MODULE_DIR_.'paypal/themes/pdf161/invoice.tax-tab.tpl', _PS_THEME_DIR_.'/pdf/invoice.tax-tab.tpl');			}		}		Configuration::updateValue('PAYPAL_FEE', '0.35');		Configuration::updateValue('PAYPAL_PCTFEE', '3.4');		Configuration::updateValue('PAYPAL_CONFIRMATION', '0');		Configuration::updateValue('PAYPAL_METHOD', '0');		Configuration::updateValue('PAYPAL_FEE_DETAIL', '0');                		return true;	}	public function uninstall()	{		include_once(_PS_MODULE_DIR_.$this->name.'/paypal_install.php');		$paypal_install = new PayPalInstall();		$paypal_install->deleteConfiguration();		return parent::uninstall();	}	public function install_DB()	{		//Instala la tabla para almacenar las operaciones en la pasarela		try{			if (!file_exists(dirname(__FILE__).'/'.self::INSTALL_SQL_FILE))				return (false);			else if (!$sql = file_get_contents(dirname(__FILE__).'/'.self::INSTALL_SQL_FILE))				return (false);			$sql = str_replace('PREFIX_', _DB_PREFIX_, $sql);			$sql = preg_split("/;\s*[\r\n]+/",$sql);			foreach ($sql AS $k=>$query)			Db::getInstance()->Execute(trim($query));		} catch (Exception $ex) {			$this->displayError($ex);		}	}	/**	 * Launch upgrade process	 */	public function runUpgrades($install = false)	{		if (version_compare(_PS_VERSION_, '1.5', '<'))			foreach (array('2.8', '3.0', '3.7', '3.8.3', '3.9', '3.10.1') as $version)			{				$file = dirname(__FILE__).'/upgrade/install-'.$version.'.php';				if (Configuration::get('PAYPAL_VERSION') < $version && file_exists($file))				{					include_once($file);					call_user_func('upgrade_module_'.str_replace('.', '_', $version), $this, $install);				}			}	}	private function compatibilityCheck()	{		if (file_exists(_PS_MODULE_DIR_.'paypalapi/paypalapi.php') && $this->active)			$this->warning = $this->l('All features of Paypal API module are included in the new Paypal module. In order to do not have any conflict, please do not use and remove PayPalAPI module.').'<br />';		/* For 1.4.3 and less compatibility */		$update_config = array('PS_OS_CHEQUE' => 1, 'PS_OS_PAYMENT' => 2, 'PS_OS_PREPARATION' => 3, 'PS_OS_SHIPPING' => 4,		'PS_OS_DELIVERED' => 5, 'PS_OS_CANCELED' => 6, 'PS_OS_REFUND' => 7, 'PS_OS_ERROR' => 8, 'PS_OS_OUTOFSTOCK' => 9,		'PS_OS_BANKWIRE' => 10, 'PS_OS_PAYPAL' => 11, 'PS_OS_WS_PAYMENT' => 12);		foreach ($update_config as $key => $value)			if (!Configuration::get($key) || (int)Configuration::get($key) < 1)			{				if (defined('_'.$key.'_') && (int)constant('_'.$key.'_') > 0)					Configuration::updateValue($key, constant('_'.$key.'_'));				else					Configuration::updateValue($key, $value);			}	}	public function isPayPalAPIAvailable()	{		$payment_method = Configuration::get('PAYPAL_PAYMENT_METHOD');		if ($payment_method != HSS && !is_null(Configuration::get('PAYPAL_API_USER')) &&		!is_null(Configuration::get('PAYPAL_API_PASSWORD')) && !is_null(Configuration::get('PAYPAL_API_SIGNATURE')))			return true;		elseif ($payment_method == HSS && !is_null(Configuration::get('PAYPAL_BUSINESS_ACCOUNT')))			return true;		return false;	}	/**	 * Initialize default values	 */	protected function loadDefaults()	{		$this->loadLangDefault();		$this->paypal_logos = new PayPalLogos($this->iso_code);		$payment_method = Configuration::get('PAYPAL_PAYMENT_METHOD');		$order_process_type = (int)Configuration::get('PS_ORDER_PROCESS_TYPE');		if (Tools::getValue('paypal_ec_canceled') || $this->context->cart === false)			unset($this->context->cookie->express_checkout);		if (version_compare(_PS_VERSION_, '1.5.0.2', '>='))		{			$version = Db::getInstance()->getValue('SELECT version FROM `'._DB_PREFIX_.'module` WHERE name = \''.$this->name.'\'');			if (empty($version) === true)				Db::getInstance()->execute('					UPDATE `'._DB_PREFIX_.'module` m					SET m.version = \''.bqSQL($this->version).'\'					WHERE m.name = \''.bqSQL($this->name).'\'');		}		if (defined('_PS_ADMIN_DIR_'))		{			/* Backward compatibility */			if (version_compare(_PS_VERSION_, '1.5', '<'))				$this->backwardCompatibilityChecks();			/* Upgrade and compatibility checks */			$this->runUpgrades();			$this->compatibilityCheck();			$this->warningsCheck();		}		else		{			if (isset($this->context->cookie->express_checkout))				$this->context->smarty->assign('paypal_authorization', true);			if (($order_process_type == 1) && ((int)$payment_method == HSS) && !$this->useMobile())				$this->context->smarty->assign('paypal_order_opc', true);			elseif (($order_process_type == 1) && ((bool)Tools::getValue('isPaymentStep') == true))			{				$shop_url = PayPal::getShopDomainSsl(true, true);				if (version_compare(_PS_VERSION_, '1.5', '<'))				{					$link = $shop_url._MODULE_DIR_.$this->name.'/express_checkout/payment.php';					$this->context->smarty->assign('paypal_confirmation', $link.'?'.http_build_query(array('get_confirmation' => true), '', '&'));				}				else				{					$values = array('fc' => 'module', 'module' => 'paypal', 'controller' => 'confirm', 'get_confirmation' => true);					$this->context->smarty->assign('paypal_confirmation', $shop_url.__PS_BASE_URI__.'?'.http_build_query($values));				}			}		}	}	protected function checkMobileCredentials()	{		$payment_method = Configuration::get('PAYPAL_PAYMENT_METHOD');		if (((int)$payment_method == HSS) && (			(!(bool)Configuration::get('PAYPAL_API_USER')) &&			(!(bool)Configuration::get('PAYPAL_API_PASSWORD')) &&			(!(bool)Configuration::get('PAYPAL_API_SIGNATURE'))))			$this->warning .= $this->l('You must set your PayPal Integral credentials in order to have the mobile theme work correctly.').'<br />';	}	protected function checkMobileNeeds()	{		$iso_code = Country::getIsoById((int)Configuration::get('PS_COUNTRY_DEFAULT'));		$paypal_countries = array('ES', 'FR', 'PL', 'IT');		if (method_exists($this->context->shop, 'getTheme'))		{			if (($this->context->shop->getTheme() == 'default') && in_array($iso_code, $paypal_countries))				$this->warning .= $this->l('The mobile theme only works with the PayPal\'s payment module at this time. Please activate the module to enable payments.').'<br />';		}		else			$this->warning .= $this->l('In order to use the module you need to install the backward compatibility.').'<br />';	}	/* Check status of backward compatibility module*/	protected function backwardCompatibilityChecks()	{		if (Module::isInstalled('backwardcompatibility'))		{			$backward_module = Module::getInstanceByName('backwardcompatibility');			if (!$backward_module->active)				$this->warning .= $this->l('To work properly the module requires the backward compatibility module enabled').'<br />';			elseif ($backward_module->version < PayPal::BACKWARD_REQUIREMENT)				$this->warning .= $this->l('To work properly the module requires at least the backward compatibility module v').PayPal::BACKWARD_REQUIREMENT.'.<br />';		}		else			$this->warning .= $this->l('In order to use the module you need to install the backward compatibility.').'<br />';	}	public function displayForm()	{		if(Tools::isSubmit('aw_install'))		{			if ($this->getPsVersion() == self::_PS_16_)				Configuration::updateValue('PS_DISABLE_OVERRIDES', false);			//$this->installOrUninstallOverrideFilesRecursive(_PS_MODULE_DIR_. $this->name.'/_override', _PS_ROOT_DIR_.'/override');			header('Location: index.php?controller=AdminModules&configure='.$this->name.'&token='.Tools::getAdminTokenLite('AdminModules').'&configure='.$this->name);		}		if(Tools::isSubmit('hook_footer'))		{			$this->registerHook('footer');			header('Location: index.php?controller=AdminModules&configure='.$this->name.'&token='.Tools::getAdminTokenLite('AdminModules').'&configure='.$this->name);		}		if(Tools::isSubmit('add_db'))		{			$this->install_DB();			header('Location: index.php?controller=AdminModules&configure='.$this->name.'&token='.Tools::getAdminTokenLite('AdminModules').'&configure='.$this->name);		}		if (($id_lang = Language::getIdByIso('EN')) == 0)			$english_language_id = (int)$this->context->employee->id_lang;		else			$english_language_id = (int)$id_lang;		$taxRules = TaxRulesGroup::getTaxRulesGroups(true);		$taxes = array($this->l('Without taxes'));		foreach ($taxRules AS $row){			$taxes[$row['id_tax_rules_group']] = $row['name'];		}					$this->context->smarty->assign(array(			'PayPal_WPS' => (int)WPS,			'PayPal_HSS' => (int)HSS,			'PayPal_ECS' => (int)ECS,			'PP_errors' => $this->_errors,			'PayPal_logo' => $this->paypal_logos->getLogos(),			'PayPal_allowed_methods' => $this->getPaymentMethods(),			'PayPal_country' => Country::getNameById((int)$english_language_id, (int)$this->default_country),			'PayPal_country_id' => (int)$this->default_country,			'PayPal_business' => Configuration::get('PAYPAL_BUSINESS'),			'PayPal_payment_method'	=> (int)Configuration::get('PAYPAL_PAYMENT_METHOD'),			'PayPal_api_username' => Configuration::get('PAYPAL_API_USER'),			'PayPal_api_password' => Configuration::get('PAYPAL_API_PASSWORD'),			'PayPal_api_signature' => Configuration::get('PAYPAL_API_SIGNATURE'),			'PayPal_api_business_account' => Configuration::get('PAYPAL_BUSINESS_ACCOUNT'),			'PayPal_express_checkout_shortcut' => (int)Configuration::get('PAYPAL_EXPRESS_CHECKOUT_SHORTCUT'),			'PayPal_in_context_checkout' => (int)Configuration::get('PAYPAL_IN_CONTEXT_CHECKOUT'),			'PayPal_in_context_checkout_merchant_id' => Configuration::get('PAYPAL_IN_CONTEXT_CHECKOUT_M_ID'),			'PayPal_sandbox_mode' => (int)Configuration::get('PAYPAL_SANDBOX'),			'PayPal_payment_capture' => (int)Configuration::get('PAYPAL_CAPTURE'),			'PayPal_country_default' => (int)$this->default_country,			'PayPal_change_country_url' => 'index.php?tab=AdminCountries&token='.Tools::getAdminTokenLite('AdminCountries').'#footer',			'Countries'	=> Country::getCountries($english_language_id),			'One_Page_Checkout'	=> (int)Configuration::get('PS_ORDER_PROCESS_TYPE'),			'PayPal_integral_evolution_template' => Configuration::get('PAYPAL_HSS_TEMPLATE'),			'PayPal_integral_evolution_solution' => Configuration::get('PAYPAL_HSS_SOLUTION'),			'PayPal_login' => (int)Configuration::get('PAYPAL_LOGIN'),			'PayPal_login_client_id' => Configuration::get('PAYPAL_LOGIN_CLIENT_ID'),			'PayPal_login_secret' => Configuration::get('PAYPAL_LOGIN_SECRET'),			'PayPal_login_tpl' => (int)Configuration::get('PAYPAL_LOGIN_TPL'),			'default_lang_iso' => Language::getIsoById($this->context->employee->id_lang),			'PayPal_fee'=> Configuration::get('PAYPAL_FEE'),			'PayPal_pctfee'=> Configuration::get('PAYPAL_PCTFEE'),			'PayPal_tax'=> Configuration::get('PAYPAL_TAX'),			'fee_detail'=> Configuration::get('PAYPAL_FEE_DETAIL'),			'PayPal_confirmation'=> Configuration::get('PAYPAL_CONFIRMATION'),			'PayPal_method'=> Configuration::get('PAYPAL_METHOD'),			'taxes'=> $taxes)		);		$this->getTranslations();		$output = '';		if(!$this->checkFile(_PS_ROOT_DIR_.'/override/classes/order/Order.php','payment_fee'))			$output .= '<div class="panel col-lg-12" style="margin-top: 15px; font-size: 1.2em;">				<p style="color: red; font-size: 1.5em;">'.$this->l('The override Order.php is missing.').'</p>				<p>'.$this->l('This override is responsible for storing the fee to be shown on the invoice.').'</p>				<p><a href="index.php?controller=AdminModules&configure='.$this->name.'&token='.Tools::getAdminTokenLite('AdminModules').'&configure='.$this->name.'&aw_install">'.$this->l('Please click here to automatically copy the file.').'</a></p>				<p>'.$this->l('If you\'ve clicked and this message still appears you must do it manually:').'<br/>				'.$this->l('Copy the file /modules/paypal/_override/classes/order/Order.php to /override/classes/order/').'</p>				</div>';		/* Check last hook REQUIRED */		if($id_hook = Hook::getIdByName('footer'))			if(!Hook::getModulesFromHook($id_hook,$this->id))			{				$output .= '<div class="panel col-lg-12" style="margin-top: 15px; font-size: 1.2em;">					<p style="color: red; font-size: 1.5em;">'.$this->l('Warning').'</p>					<p>'.$this->l('Paypal AW 7.3.9.9 require to be hooked in footer, please click in button below to hook it automatically.').'</p>					<p><a class="button btn" href="index.php?controller=AdminModules&configure='.$this->name.'&token='.Tools::getAdminTokenLite('AdminModules').'&configure='.$this->name.'&hook_footer">'.$this->l('Hook it!').'</a></p>					</div>';			}		if(!Db::getInstance()->executeS('SHOW COLUMNS FROM '._DB_PREFIX_.'orders LIKE "payment_fee"'))			$output .= '<div class="panel col-lg-12" style="margin-top: 15px; font-size: 1.2em;">				<p style="color: red; font-size: 1.5em;">'.$this->l('Warning').'</p>				<p>'.$this->l('Missing some columns in the database (payment_fee). Please click in button below to add it automatically').'</p>				<p><a class="button btn" href="index.php?controller=AdminModules&configure='.$this->name.'&token='.Tools::getAdminTokenLite('AdminModules').'&configure='.$this->name.'&add_db">'.$this->l('Add columns').'</a></p>				</div>';									$output .= $this->_displayHome();		$output .= $this->fetchTemplate('/views/templates/admin/back_office.tpl');		if ($this->active == false)			return $output.$this->hookBackOfficeHeader();		return $output;	}	public function _productKey() 	{		$output ='<fieldset>		<div style="float:left;width:100%;">';				$output .= '	<form method="post" name="mc" action="">						  	<label for="id_group">'.$this->l('Product Key:').'</label>						  		<div class="margin-form">											<input size="40" type="text" name="productKey" id="productKey"  value="" />											<a href="http://www.alabazweb.com/modules/megakeys/mymodules.php">'.$this->l('Generate Key').'</a>									</div>							<center>							<br/>							<input type="submit" class="button" name="submitKey" value="'.$this->l('Save Key').'">							</center>							</form>';		return $output;	}	public function getContent()	{		$this->_postProcess();			$html = '';						//$html = $this->checkCurrencyP(true,true,true);		$html = $this->hookDisplayAwCustomView();		return $html;	}	protected function hookDisplayAwCustomView(){	    return $this->displayForm();	}	/**	 * Hooks methods	 */	 	public function hookHeader()	{		if (isset($this->context->cart) && $this->context->cart->id)			$this->context->smarty->assign('id_cart', (int)$this->context->cart->id);				$smarty = $this->context->smarty;		$smarty->assign(array(			'ssl_enabled' => Configuration::get('PS_SSL_ENABLED'),			'PAYPAL_SANDBOX' => Configuration::get('PAYPAL_SANDBOX'),			'PayPal_in_context_checkout' => Configuration::get('PAYPAL_IN_CONTEXT_CHECKOUT'),			'PayPal_in_context_checkout_merchant_id' => Configuration::get('PAYPAL_IN_CONTEXT_CHECKOUT_M_ID')		));	}	public function hookFooter()	{		if ($this->useMobile())		{			$id_hook = (int)Configuration::get('PS_MOBILE_HOOK_HEADER_ID');			if ($id_hook > 0)			{				$module = Hook::getModulesFromHook($id_hook, $this->id);				if (!$module)					$this->registerHook('displayMobileHeader');			}		}		/* Added for PrestaBox */		if (method_exists($this->context->controller, 'addCSS'))			$this->context->controller->addCSS(_MODULE_DIR_.$this->name.'/views/css/paypal.css');		else			Tools::addCSS(_MODULE_DIR_.$this->name.'/views/css/paypal.css');		$smarty = $this->context->smarty;		$process = '<script type="text/javascript">'.$this->fetchTemplate('views/js/paypal.js').'</script>';		if(Configuration::get('PAYPAL_IN_CONTEXT_CHECKOUT'))			$process .= '<script async src="//www.paypalobjects.com/api/checkout.js"></script>';		if ((			(method_exists($smarty, 'getTemplateVars') && ($smarty->getTemplateVars('page_name') == 'authentication' || $smarty->getTemplateVars('page_name') == 'order-opc' ))				|| (isset($smarty->_tpl_vars) && ($smarty->_tpl_vars['page_name'] == 'authentication' || $smarty->_tpl_vars['page_name'] == 'order-opc')))			&&			(int)Configuration::get('PAYPAL_LOGIN') == 1)		{			$this->context->smarty->assign(array(				'paypal_locale' => $this->getLocale(),				'PAYPAL_LOGIN_CLIENT_ID' => Configuration::get('PAYPAL_LOGIN_CLIENT_ID'),				'PAYPAL_LOGIN_TPL' => Configuration::get('PAYPAL_LOGIN_TPL'),				'PAYPAL_RETURN_LINK' => PayPalLogin::getReturnLink(),			));			$process .= '				<script src="https://www.paypalobjects.com/js/external/api.js"></script>				<script>'.$this->fetchTemplate('views/js/paypal_login.js').'</script>';		}		return $process;	}	public function getLocale()	{		switch (Language::getIsoById($this->context->language->id))		{			case 'fr':				return 'fr-fr';			case 'hk':				return 'zh-hk';			case 'cn':				return 'zh-cn';			case 'tw':				return 'zh-tw';			case 'xc':				return 'zh-xc';			case 'dk':				return 'da-dk';			case 'nl':				return 'nl-nl';			case 'gb':				return 'en-gb';			case 'de':				return 'de-de';			case 'il':				return 'he-il';			case 'id':				return 'id-id';			case 'il':				return 'it-it';			case 'jp':				return 'ja-jp';			case 'no':				return 'no-no';			case 'pt':				return 'pt-pt';			case 'pl':				return 'pl-pl';			case 'ru':				return 'ru-ru';			case 'es':				return 'es-es';			case 'se':				return 'sv-se';			case 'th':				return 'th-th';			case 'tr':				return 'tr-tr';			default :				return 'en-gb';		}	}	public function hookDisplayMobileHeader()	{		return $this->hookHeader();	}	public function hookDisplayMobileShoppingCartTop()	{		return $this->renderExpressCheckoutButton('cart').$this->renderExpressCheckoutForm('cart');	}	public function hookDisplayMobileAddToCartTop()	{		return $this->renderExpressCheckoutButton('cart');	}	public function hookProductFooter()	{		$content = (!$this->useMobile()) ? $this->renderExpressCheckoutButton('product') : null;		return $content.$this->renderExpressCheckoutForm('product');	}	public function hookPayment($params)	{		if (!$this->active)			return;		$use_mobile = $this->useMobile();		if ($use_mobile)			$method = ECS;		else			$method = (int)Configuration::get('PAYPAL_PAYMENT_METHOD');		if (isset($this->context->cookie->express_checkout))			$this->redirectToConfirmation();		$iso_lang = array(			'en' => 'en_US',			'fr' => 'fr_FR', 			'de' => 'de_DE',			'es' => 'es_ES',		);				// Mostrar detalles del recargo		$fee_detail_text = '';		if(Configuration::get('PAYPAL_FEE_DETAIL') != 0){			if(Configuration::get('PAYPAL_PCTFEE') != 0){				$fee_detail_text = Tools::ps_round(Configuration::get('PAYPAL_PCTFEE'),2).'%';				if(Configuration::get('PAYPAL_FEE') != 0)					$fee_detail_text .= ' + '.Tools::displayPrice(Configuration::get('PAYPAL_FEE'), $this->context->currency, false);			}		}				$this->context->smarty->assign(array(			'logos' => $this->paypal_logos->getLogos(),			'sandbox_mode' => Configuration::get('PAYPAL_SANDBOX'),			'use_mobile' => $use_mobile,			'PayPal_lang_code' => (isset($iso_lang[$this->context->language->iso_code])) ? $iso_lang[$this->context->language->iso_code] : 'en_US',			'feedetail' => $fee_detail_text,		));		if ($method == HSS)		{			$billing_address = new Address($this->context->cart->id_address_invoice);			$delivery_address = new Address($this->context->cart->id_address_delivery);			$billing_address->country = new Country($billing_address->id_country);			$delivery_address->country = new Country($delivery_address->id_country);			$billing_address->state	= new State($billing_address->id_state);			$delivery_address->state = new State($delivery_address->id_state);			$cart = $this->context->cart;			$cart_details = $cart->getSummaryDetails(null, true);			if ((int)Configuration::get('PAYPAL_SANDBOX') == 1)				$action_url = 'https://securepayments.sandbox.paypal.com/acquiringweb';			else				$action_url = 'https://securepayments.paypal.com/acquiringweb';			$shop_url = PayPal::getShopDomainSsl(true, true);			$fee_with_taxes = (float) $this->getCost($this->context->cart);			$fee_without_taxes = (float) $this->getCost($this->context->cart, false);			$fee_taxes = $fee_with_taxes - $fee_without_taxes;			$cart_details['total_tax'] = (float) $cart_details['total_tax'] + $fee_taxes;			$this->context->smarty->assign(array(				'action_url' => $action_url,				'cart' => $cart,				'cart_details' => $cart_details,				'currency' => new Currency((int)$cart->id_currency),				'customer' => $this->context->customer,				'business_account' => Configuration::get('PAYPAL_BUSINESS_ACCOUNT'),				'custom' => Tools::jsonEncode(array('id_cart' => $cart->id, 'hash' => sha1(serialize($cart->nbProducts())))),				'gift_price' => (float)$this->getGiftWrappingPrice(),				'billing_address' => $billing_address,				'delivery_address' => $delivery_address,				'shipping' => $cart_details['total_shipping_tax_exc'],				'subtotal' => $cart_details['total_price_without_tax'] - $cart_details['total_shipping_tax_exc'] + $fee_without_taxes,				'time' => time(),				'cancel_return' => $this->context->link->getPageLink('order.php'),				'notify_url' => $shop_url._MODULE_DIR_.$this->name.'/ipn.php',				'return_url' => $shop_url._MODULE_DIR_.$this->name.'/integral_evolution/submit.php?id_cart='.(int)$cart->id,				'tracking_code' => $this->getTrackingCode($method),				'iso_code' => Tools::strtoupper($this->context->language->iso_code),				'payment_hss_solution' => Configuration::get('PAYPAL_HSS_SOLUTION'),				'payment_hss_template' => Configuration::get('PAYPAL_HSS_TEMPLATE'),				'fee' => $fee_with_taxes			));			$this->getTranslations();			return $this->fetchTemplate('integral_evolution_payment.tpl');		}		elseif ($method == WPS || $method == ECS)		{			$this->getTranslations();			$this->context->smarty->assign(array(				'PayPal_integral' => WPS,				'PayPal_express_checkout' => ECS,				'PayPal_payment_method' => $method,				'PayPal_payment_type' => 'payment_cart',				'PayPal_current_page' => $this->getCurrentUrl(),				'PayPal_tracking_code' => $this->getTrackingCode($method),				'fee' => $this->getCost($this->context->cart),				'PayPal_in_context_checkout' => Configuration::get('PAYPAL_IN_CONTEXT_CHECKOUT'),				'PayPal_in_context_checkout_merchant_id' => Configuration::get('PAYPAL_IN_CONTEXT_CHECKOUT_M_ID')				));							/* FIX compatibilty with OPC Module */			if (file_exists(_PS_MODULE_DIR_ . "onepagecheckout/onepagecheckout.php") && Module::isEnabled('onepagecheckout'))				return $this->fetchTemplate('express_checkout_payment_opc.tpl');			else				return $this->fetchTemplate('express_checkout_payment.tpl');		}		return null;	}	public function hookDisplayPaymentEU($params) 	{		if (!$this->active)			return;		if ($this->hookPayment($params) == null)			return null;		$use_mobile = $this->useMobile();		if ($use_mobile)			$method = ECS;		else			$method = (int)Configuration::get('PAYPAL_PAYMENT_METHOD');		if (isset($this->context->cookie->express_checkout))			$this->redirectToConfirmation();		$logos = $this->paypal_logos->getLogos();		if (isset($logos['LocalPayPalHorizontalSolutionPP']) && $method == WPS)			$logo = $logos['LocalPayPalHorizontalSolutionPP'];		else			$logo = $logos['LocalPayPalLogoMedium'];				if ($method == HSS)		{			return array(				'cta_text' => $this->l('Paypal'),				'logo' => $logo,				'form' => $this->fetchTemplate('integral_evolution_payment_eu.tpl')			);		}		elseif ($method == WPS || $method == ECS)		{			return array(				'cta_text' => $this->l('Paypal'),				'logo' => $logo,				'form' => $this->fetchTemplate('express_checkout_payment_eu.tpl')			);		}	}	public function hookShoppingCartExtra()	{		if (!$this->active || (((int)Configuration::get('PAYPAL_PAYMENT_METHOD') == HSS) && !$this->context->getMobileDevice()) ||			!Configuration::get('PAYPAL_EXPRESS_CHECKOUT_SHORTCUT') || !in_array(ECS, $this->getPaymentMethods()) || isset($this->context->cookie->express_checkout))			return null;		$values = array('en' => 'en_US', 'fr' => 'fr_FR', 'de' => 'de_DE');		$paypal_logos = $this->paypal_logos->getLogos();		$this->context->smarty->assign(array(			'PayPal_payment_type' => 'cart',			'paypal_express_checkout_shortcut_logo' => isset($paypal_logos['ExpressCheckoutShortcutButton']) ? $paypal_logos['ExpressCheckoutShortcutButton'] : false,			'PayPal_current_page' => $this->getCurrentUrl(),			'PayPal_lang_code' => (isset($values[$this->context->language->iso_code]) ? $values[$this->context->language->iso_code] : 'en_US'),			'PayPal_tracking_code' => $this->getTrackingCode((int)Configuration::get('PAYPAL_PAYMENT_METHOD')),			'include_form' => true,			'template_dir' => dirname(__FILE__).'/views/templates/hook/'));		return $this->fetchTemplate('express_checkout_shortcut_button.tpl');	}	public function hookPaymentReturn()	{		if (!$this->active)			return null;		return $this->fetchTemplate('confirmation.tpl');	}	public function hookRightColumn()	{		$this->context->smarty->assign('logo', $this->paypal_logos->getCardsLogo(true));		return $this->fetchTemplate('column.tpl');	}	public function hookLeftColumn()	{		return $this->hookRightColumn();	}	public function hookBackBeforePayment($params)	{		if (!$this->active)			return null;		/* Only execute if you use PayPal API for payment */		if (((int)Configuration::get('PAYPAL_PAYMENT_METHOD') != HSS) && $this->isPayPalAPIAvailable())		{			if ($params['module'] != $this->name || !$this->context->cookie->paypal_token || !$this->context->cookie->paypal_payer_id)				return false;			Tools::redirect('modules/'.$this->name.'/express_checkout/submit.php?confirm=1&token='.$this->context->cookie->paypal_token.'&payerID='.$this->context->cookie->paypal_payer_id);		}	}	public function setPayPalAsConfigured()	{		Configuration::updateValue('PAYPAL_CONFIGURATION_OK', true);	}	public function hookAdminOrder($params)	{		if (Tools::isSubmit('submitPayPalCapture'))		{			if ($capture_amount = Tools::getValue('totalCaptureMoney'))			{				if ($capture_amount = PaypalCapture::parsePrice($capture_amount))				{					if (Validate::isFloat($capture_amount))					{						$capture_amount = Tools::ps_round($capture_amount, '6');						$ord = new Order((int)$params['id_order']);						$cpt = new PaypalCapture();												if (($capture_amount > Tools::ps_round(0, '6')) && (Tools::ps_round($cpt->getRestToPaid($ord), '6') >= $capture_amount))						{							$complete = false;														if ($capture_amount > Tools::ps_round((float)$ord->total_paid, '6'))							{								$capture_amount = Tools::ps_round((float)$ord->total_paid, '6');								$complete = true;							}							if ($capture_amount == Tools::ps_round($cpt->getRestToPaid($ord), '6'))								$complete = true;							$this->_doCapture($params['id_order'], $capture_amount, $complete);						}					}				}			}		}		elseif (Tools::isSubmit('submitPayPalRefund'))			$this->_doTotalRefund($params['id_order']);		$admin_templates = array();		if ($this->isPayPalAPIAvailable())		{			if ($this->_needValidation((int)$params['id_order']))				$admin_templates[] = 'validation';			if ($this->_needCapture((int)$params['id_order']))				$admin_templates[] = 'capture';			if ($this->_canRefund((int)$params['id_order']))				$admin_templates[] = 'refund';		}				$order = new Order((int)$params['id_order']);		if (count($admin_templates) > 0)		{			$order = new Order((int)$params['id_order']);			$currency = new Currency($order->id_currency);			$cpt = new PaypalCapture();			$cpt->id_order = (int)$order->id;			if (version_compare(_PS_VERSION_, '1.5', '>='))				$order_state = $order->current_state;			else				$order_state = OrderHistory::getLastOrderState($order->id);			$this->context->smarty->assign(				array(					'authorization' => (int)Configuration::get('PAYPAL_OS_AUTHORIZATION'),					'base_url' => _PS_BASE_URL_.__PS_BASE_URI__,					'module_name' => $this->name,					'order_state' => $order_state,					'params' => $params,					'id_currency' => $currency->getSign(),					'rest_to_capture' => Tools::ps_round($cpt->getRestToPaid($order), '6'),					'list_captures' => $cpt->getListCaptured(),					'ps_version' => _PS_VERSION_				)			);			foreach ($admin_templates as $admin_template)			{				$this->_html .= $this->fetchTemplate('/views/templates/admin/admin_order/'.$admin_template.'.tpl');				$this->_postProcess();				$this->_html .= '</fieldset>';			}		}		if(Validate::isLoadedObject($order) && $order->payment_fee!=0 && $order->module == $this->name)		{			$this->_html .= '<div class="row"><div class="col-lg-7"><div class="panel"><fieldset>			<legend><img alt="'.$this->l('Connexion').'" src="'.$this->_path.'logo.gif"/> '.$this->l('Paypal fee').'</legend>			<form method="post" action="">';			$this->_html .= '<p class="center">			<label for="load_last_cart" class="t">';			$this->_html .= $this->l('Fee applied for Paypal:');			$this->_html .= ' <span style="color:red">'.Tools::displayPrice($order->payment_fee). '</span></label>				</p>			</form>			</fieldset></div></div></div>';		}		return $this->_html;	}	public function hookCancelProduct($params)	{		if (Tools::isSubmit('generateDiscount') || !$this->isPayPalAPIAvailable() || Tools::isSubmit('generateCreditSlip'))			return false;		elseif ($params['order']->module != $this->name || !($order = $params['order']) || !Validate::isLoadedObject($order))			return false;		elseif (!$order->hasBeenPaid())			return false;		$order_detail = new OrderDetail((int)$params['id_order_detail']);		if (!$order_detail || !Validate::isLoadedObject($order_detail))			return false;		$paypal_order = PayPalOrder::getOrderById((int)$order->id);		if (!$paypal_order)			return false;		$products = $order->getProducts();		$cancel_quantity = Tools::getValue('cancelQuantity');		$message = $this->l('Cancel products result:').'<br>';		$amount = (float)($products[(int)$order_detail->id]['product_price_wt'] * (int)$cancel_quantity[(int)$order_detail->id]);		$refund = $this->_makeRefund($paypal_order['id_transaction'], (int)$order->id, $amount);		$this->formatMessage($refund, $message);		$this->_addNewPrivateMessage((int)$order->id, $message);	}	public function hookActionPSCleanerGetModulesTables()	{		return array('paypal_customer', 'paypal_order');	}	public function hookBackOfficeHeader()	{		if ((strcmp(Tools::getValue('configure'), $this->name) === 0) ||			(strcmp(Tools::getValue('module_name'), $this->name) === 0))		{			if (version_compare(_PS_VERSION_, '1.5', '<'))			{				$output = '<script type="text/javascript" src="'.__PS_BASE_URI__.'js/jquery/jquery-ui-1.8.10.custom.min.js"></script>					<script type="text/javascript" src="'.__PS_BASE_URI__.'js/jquery/jquery.fancybox-1.3.4.js"></script>					<link type="text/css" rel="stylesheet" href="'.__PS_BASE_URI__.'css/jquery.fancybox-1.3.4.css" />					<link type="text/css" rel="stylesheet" href="'._MODULE_DIR_.$this->name.'/views/css/paypal.css" />';			}			else			{				$this->context->controller->addJquery();				$this->context->controller->addJQueryPlugin('fancybox');				$this->context->controller->addCSS(_MODULE_DIR_.$this->name.'/views/css/paypal.css');			}			$this->context->smarty->assign(array(				'PayPal_module_dir' => _MODULE_DIR_.$this->name,				'PayPal_WPS' => (int)WPS,				'PayPal_HSS' => (int)HSS,				'PayPal_ECS' => (int)ECS			));			return (isset($output) ? $output : null).$this->fetchTemplate('/views/templates/admin/header.tpl');		}		return null;	}	public function renderExpressCheckoutButton($type)	{		if ((!Configuration::get('PAYPAL_EXPRESS_CHECKOUT_SHORTCUT') && !$this->useMobile()))			return null;		if (!in_array(ECS, $this->getPaymentMethods()) || (((int)Configuration::get('PAYPAL_BUSINESS') == 1) &&		(int)Configuration::get('PAYPAL_PAYMENT_METHOD') == HSS) && !$this->useMobile())			return null;		$paypal_logos = $this->paypal_logos->getLogos();		$iso_lang = array(			'en' => 'en_US',			'fr' => 'fr_FR', 			'de' => 'de_DE',			'es' => 'es_ES',		);		$this->context->smarty->assign(array(			'use_mobile' => (bool)$this->useMobile(),			'PayPal_payment_type' => $type,			'PayPal_current_page' => $this->getCurrentUrl(),			'PayPal_lang_code' => (isset($iso_lang[$this->context->language->iso_code])) ? $iso_lang[$this->context->language->iso_code] : 'en_US',			'PayPal_tracking_code' => $this->getTrackingCode((int)Configuration::get('PAYPAL_PAYMENT_METHOD')),			'paypal_express_checkout_shortcut_logo' => isset($paypal_logos['ExpressCheckoutShortcutButton']) ? $paypal_logos['ExpressCheckoutShortcutButton'] : false,		));		return $this->fetchTemplate('express_checkout_shortcut_button.tpl');	}	public function renderExpressCheckoutForm($type)	{		if ((!Configuration::get('PAYPAL_EXPRESS_CHECKOUT_SHORTCUT') && !$this->useMobile()) || !in_array(ECS, $this->getPaymentMethods()) ||		(((int)Configuration::get('PAYPAL_BUSINESS') == 1) && ((int)Configuration::get('PAYPAL_PAYMENT_METHOD') == HSS) && !$this->useMobile()))			return;				$this->context->smarty->assign(array(			'PayPal_payment_type' => $type,			'PayPal_current_page' => $this->getCurrentUrl(),			'PayPal_tracking_code' => $this->getTrackingCode((int)Configuration::get('PAYPAL_PAYMENT_METHOD')),					));		return $this->fetchTemplate('express_checkout_shortcut_form.tpl');	}	public function useMobile()	{		if ((method_exists($this->context, 'getMobileDevice') && $this->context->getMobileDevice()) || Tools::getValue('ps_mobile_site'))			return true;		return false;	}	public function getTrackingCode($method)	{		if ((_PS_VERSION_ < '1.5') && (_THEME_NAME_ == 'prestashop_mobile' || Tools::getValue('ps_mobile_site') == 1))		{			if (_PS_MOBILE_TABLET_)				return TABLET_TRACKING_CODE;			elseif (_PS_MOBILE_PHONE_)				return SMARTPHONE_TRACKING_CODE;		}		//Get Seamless checkout				$login_user = false;		if (Configuration::get('PAYPAL_LOGIN'))		{			$login_user = PaypalLoginUser::getByIdCustomer((int)$this->context->customer->id);			if ($login_user && $login_user->expires_in <= time())			{				$obj = new PayPalLogin();				$login_user = $obj->getRefreshToken();			}		}		if ($method == WPS)		{			if ($login_user)				return TRACKING_EXPRESS_CHECKOUT_SEAMLESS;			else				return TRACKING_INTEGRAL;		}		if ($method == HSS)			return TRACKING_INTEGRAL_EVOLUTION;		if ($method == ECS)		{			if ($login_user)				return TRACKING_EXPRESS_CHECKOUT_SEAMLESS;			else				return TRACKING_OPTION_PLUS;		}		return TRACKING_CODE;	}	public function getTranslations()	{		$file = dirname(__FILE__).'/'._PAYPAL_TRANSLATIONS_XML_;		if (file_exists($file))		{			$xml = simplexml_load_file($file);			if (isset($xml) && $xml)			{				$index = -1;				$content = $default = array();				while (isset($xml->country[++$index]))				{					$country = $xml->country[$index];					$country_iso = $country->attributes()->iso_code;					if (($this->iso_code != 'default') && ($country_iso == $this->iso_code))						$content = (array)$country;					elseif ($country_iso == 'default')						$default = (array)$country;				}				$content += $default;				$this->context->smarty->assign('PayPal_content', $content);				return true;			}		}		return false;	}	public function getPayPalURL()	{		return 'www'.(Configuration::get('PAYPAL_SANDBOX') ? '.sandbox' : '').'.paypal.com';	}	public function getPaypalIntegralEvolutionUrl()	{		if (Configuration::get('PAYPAL_SANDBOX'))			return 'https://'.$this->getPayPalURL().'/cgi-bin/acquiringweb';		return 'https://securepayments.paypal.com/acquiringweb?cmd=_hosted-payment';	}	public function getPaypalStandardUrl()	{		return 'https://'.$this->getPayPalURL().'/cgi-bin/webscr';	}	public function getAPIURL()	{		return 'api-3t'.(Configuration::get('PAYPAL_SANDBOX') ? '.sandbox' : '').'.paypal.com';	}	public function getAPIScript()	{		return '/nvp';	}	public function getCountryDependency($iso_code)	{		$localizations = array(			'AU' => array('AU'), 'BE' => array('BE'), 'CN' => array('CN', 'MO'), 'CZ' => array('CZ'), 'DE' => array('DE'), 'ES' => array('ES'),			'FR' => array('FR'), 'GB' => array('GB'), 'HK' => array('HK'), 'IL' => array('IL'), 'IN' => array('IN'), 'IT' => array('IT', 'VA'),			'JP' => array('JP'), 'MY' => array('MY'), 'NL' => array('AN', 'NL'), 'NZ' => array('NZ'), 'PL' => array('PL'), 'PT' => array('PT', 'BR'),			'RA' => array('AF', 'AS', 'BD', 'BN', 'BT', 'CC', 'CK', 'CX', 'FM', 'HM', 'ID', 'KH', 'KI', 'KN', 'KP', 'KR', 'KZ',	'LA', 'LK', 'MH',				'MM', 'MN', 'MV', 'MX', 'NF', 'NP', 'NU', 'OM', 'PG', 'PH', 'PW', 'QA', 'SB', 'TJ', 'TK', 'TL', 'TM', 'TO', 'TV', 'TZ', 'UZ', 'VN',				'VU', 'WF', 'WS'),			'RE' => array('IE', 'ZA', 'GP', 'GG', 'JE', 'MC', 'MS', 'MP', 'PA', 'PY', 'PE', 'PN', 'PR', 'LC', 'SR', 'TT',				'UY', 'VE', 'VI', 'AG', 'AR', 'CA', 'BO', 'BS', 'BB', 'BZ', 'CL', 'CO', 'CR', 'CU', 'SV', 'GD', 'GT', 'HN', 'JM', 'NI', 'AD', 'AE',				'AI', 'AL', 'AM', 'AO', 'AQ', 'AT', 'AW', 'AX', 'AZ', 'BA', 'BF', 'BG', 'BH', 'BI', 'BJ', 'BL', 'BM', 'BV', 'BW', 'BY', 'CD', 'CF', 'CG',				'CH', 'CI', 'CM', 'CV', 'CY', 'DJ', 'DK', 'DM', 'DO', 'DZ', 'EC', 'EE', 'EG', 'EH', 'ER', 'ET', 'FI', 'FJ', 'FK', 'FO', 'GA', 'GE', 'GF',				'GH', 'GI', 'GL', 'GM', 'GN', 'GQ', 'GR', 'GS', 'GU', 'GW', 'GY', 'HR', 'HT', 'HU', 'IM', 'IO', 'IQ', 'IR', 'IS', 'JO', 'KE', 'KM', 'KW',				'KY', 'LB', 'LI', 'LR', 'LS', 'LT', 'LU', 'LV', 'LY', 'MA', 'MD', 'ME', 'MF', 'MG', 'MK', 'ML', 'MQ', 'MR', 'MT', 'MU', 'MW', 'MZ', 'NA',				'NC', 'NE', 'NG', 'NO', 'NR', 'PF', 'PK', 'PM', 'PS', 'RE', 'RO', 'RS', 'RU', 'RW', 'SA', 'SC', 'SD', 'SE', 'SI', 'SJ', 'SK', 'SL',				'SM', 'SN', 'SO', 'ST', 'SY', 'SZ', 'TC', 'TD', 'TF', 'TG', 'TN', 'UA', 'UG', 'VC', 'VG', 'YE', 'YT', 'ZM', 'ZW'),			'SG' => array('SG'), 'TH' => array('TH'), 'TR' => array('TR'), 'TW' => array('TW'), 'US' => array('US'));		foreach ($localizations as $key => $value)			if (in_array($iso_code, $value))				return $key;		return $this->getCountryDependency(self::DEFAULT_COUNTRY_ISO);	}	public function getPaymentMethods()	{		// WPS -> Web Payment Standard		// HSS -> Web Payment Pro / Integral Evolution		// ECS -> Express Checkout Solution		$payment_method = array('AU' => array(WPS, HSS, ECS), 'BE' => array(WPS, ECS), 'CN' => array(WPS, ECS), 'CZ' => array(), 'DE' => array(WPS, ECS),		'ES' => array(WPS, HSS, ECS), 'FR' => array(WPS, HSS, ECS), 'GB' => array(WPS, HSS, ECS), 'HK' => array(WPS, HSS, ECS),		'IL' => array(WPS, ECS), 'IN' => array(WPS, ECS), 'IT' => array(WPS, HSS, ECS), 'JP' => array(WPS, HSS, ECS), 'MY' => array(WPS, ECS),		'NL' => array(WPS, ECS), 'NZ' => array(WPS, ECS), 'PL' => array(WPS, ECS), 'PT' => array(WPS, ECS), 'RA' => array(WPS, ECS), 'RE' => array(WPS, ECS),		'SG' => array(WPS, ECS), 'TH' => array(WPS, ECS), 'TR' => array(WPS, ECS), 'TW' => array(WPS, ECS), 'US' => array(WPS, ECS),		'ZA' => array(WPS, ECS));		return isset($payment_method[$this->iso_code]) ? $payment_method[$this->iso_code] : $payment_method[self::DEFAULT_COUNTRY_ISO];	}	public function getCountryCode()	{		$cart = new Cart((int)$this->context->cookie->id_cart);		$address = new Address((int)$cart->id_address_invoice);		$country = new Country((int)$address->id_country);		return $country->iso_code;	}	public function displayPayPalAPIError($message, $log = false, $aw_error = false)	{		$send = true;		// Sanitize log		foreach ($log as $key => $string)		{			if ($string == 'ACK -> Success')				$send = false;			elseif (Tools::substr($string, 0, 6) == 'METHOD')			{				$values = explode('&', $string);				foreach ($values as $key2 => $value)				{					$values2 = explode('=', $value);					foreach ($values2 as $key3 => $value2)						if ($value2 == 'PWD' || $value2 == 'SIGNATURE')							$values2[$key3 + 1] = '*********';					$values[$key2] = implode('=', $values2);				}				$log[$key] = implode('&', $values);			}		}		$this->context->smarty->assign(array('message' => $message, 'logs' => $log));		if ($send)		{			$id_lang = (int)$this->context->language->id;			$iso_lang = Language::getIsoById($id_lang);			if (!is_dir(dirname(__FILE__).'/mails/'.Tools::strtolower($iso_lang)))				$id_lang = Language::getIdByIso('en');			Mail::Send($id_lang, 'error_reporting', Mail::l('Error reporting from your PayPal module',			(int)$this->context->language->id), array('{logs}' => implode('<br />', $log),'{aw_error}' => $aw_error), Configuration::get('PS_SHOP_EMAIL'),			null, null, null, null, null, _PS_MODULE_DIR_.$this->name.'/mails/');		}		return $this->fetchTemplate('error.tpl');	}	private function _canRefund($id_order)	{		if (!(bool)$id_order)			return false;		$paypal_order = Db::getInstance()->getRow('			SELECT `payment_status`, `capture`			FROM `'._DB_PREFIX_.'paypal_order`			WHERE `id_order` = '.(int)$id_order);		return $paypal_order && $paypal_order['payment_status'] == 'Completed' && $paypal_order['capture'] == 0;	}	private function _needValidation($id_order)	{		if (!(int)$id_order)			return false;		$order = Db::getInstance()->getRow('			SELECT `payment_method`, `payment_status`			FROM `'._DB_PREFIX_.'paypal_order`			WHERE `id_order` = '.(int)$id_order);		return $order && $order['payment_method'] != HSS && $order['payment_status'] == 'Pending_validation';	}	private function _needCapture($id_order)	{		if (!(int)$id_order)			return false;		$result = Db::getInstance()->getRow('			SELECT `payment_method`, `payment_status`			FROM `'._DB_PREFIX_.'paypal_order`			WHERE `id_order` = '.(int)$id_order.' AND `capture` = 1');		return $result && $result['payment_method'] != HSS && $result['payment_status'] == 'Pending_capture';	}	private function _preProcess()	{		if (Tools::isSubmit('submitPaypal'))		{			$business = Tools::getValue('business') !== false ? (int)Tools::getValue('business') : false;			$payment_method = Tools::getValue('paypal_payment_method') !== false ? (int)Tools::getValue('paypal_payment_method') : false;			$payment_capture = Tools::getValue('payment_capture') !== false ? (int)Tools::getValue('payment_capture') : false;			$sandbox_mode = Tools::getValue('sandbox_mode') !== false ? (int)Tools::getValue('sandbox_mode') : false;			if ($this->default_country === false || $sandbox_mode === false || $payment_capture === false || $business === false || $payment_method === false)				$this->_errors[] = $this->l('Some fields are empty.');			elseif (($business == 0 || ($business == 1 && $payment_method != HSS)) && (!Tools::getValue('api_username') || !Tools::getValue('api_password') || !Tools::getValue('api_signature')))				$this->_errors[] = $this->l('Credentials fields cannot be empty');			elseif ($business == 1 && $payment_method == HSS && !Tools::getValue('api_business_account'))				$this->_errors[] = $this->l('Business e-mail field cannot be empty');		}		return !count($this->_errors);	}	private function _postProcess()	{		if (Tools::isSubmit('submitPaypal'))		{			if (Tools::getValue('paypal_country_only'))				Configuration::updateValue('PAYPAL_COUNTRY_DEFAULT', (int)Tools::getValue('paypal_country_only'));			elseif ($this->_preProcess())			{				Configuration::updateValue('PAYPAL_BUSINESS', (int)Tools::getValue('business'));				Configuration::updateValue('PAYPAL_PAYMENT_METHOD', (int)Tools::getValue('paypal_payment_method'));				Configuration::updateValue('PAYPAL_API_USER', trim(Tools::getValue('api_username')));				Configuration::updateValue('PAYPAL_API_PASSWORD', trim(Tools::getValue('api_password')));				Configuration::updateValue('PAYPAL_API_SIGNATURE', trim(Tools::getValue('api_signature')));				Configuration::updateValue('PAYPAL_BUSINESS_ACCOUNT', trim(Tools::getValue('api_business_account')));				Configuration::updateValue('PAYPAL_EXPRESS_CHECKOUT_SHORTCUT', (int)Tools::getValue('express_checkout_shortcut'));				Configuration::updateValue('PAYPAL_IN_CONTEXT_CHECKOUT_M_ID', Tools::getValue('in_context_checkout_merchant_id'));				Configuration::updateValue('PAYPAL_SANDBOX', (int)Tools::getValue('sandbox_mode'));				Configuration::updateValue('PAYPAL_CAPTURE', (int)Tools::getValue('payment_capture'));				/* USE PAYPAL LOGIN */				Configuration::updateValue('PAYPAL_LOGIN', (int)Tools::getValue('paypal_login'));				Configuration::updateValue('PAYPAL_LOGIN_CLIENT_ID', Tools::getValue('paypal_login_client_id'));				Configuration::updateValue('PAYPAL_LOGIN_SECRET', Tools::getValue('paypal_login_client_secret'));				Configuration::updateValue('PAYPAL_LOGIN_TPL', (int)Tools::getValue('paypal_login_client_template'));				/* /USE PAYPAL LOGIN */				/* IS IN_CONTEXT_CHECKOUT ENABLED */				if((int)Tools::getValue('paypal_payment_method') != 2)					Configuration::updateValue('PAYPAL_IN_CONTEXT_CHECKOUT', (int)Tools::getValue('in_context_checkout'));				else					Configuration::updateValue('PAYPAL_IN_CONTEXT_CHECKOUT', 0);				/* /IS IN_CONTEXT_CHECKOUT ENABLED */				//EXPRESS CHECKOUT TEMPLATE				Configuration::updateValue('PAYPAL_HSS_SOLUTION', (int)Tools::getValue('integral_evolution_solution'));				if (Tools::getValue('integral_evolution_solution') == PAYPAL_HSS_IFRAME)					Configuration::updateValue('PAYPAL_HSS_TEMPLATE', 'D');				else					Configuration::updateValue('PAYPAL_HSS_TEMPLATE', Tools::getValue('integral_evolution_template'));													$fee = (float)Tools::getValue('fee');				if($fee < 0)				    $fee = 0;				Configuration::updateValue('PAYPAL_FEE', $fee);				$pcfee = (float)Tools::getValue('pctfee');				if($pcfee < 0)				    $pcfee = 0;				Configuration::updateValue('PAYPAL_PCTFEE', $pcfee);				Configuration::updateValue('PAYPAL_TAX', Tools::getValue('tax_rules'));				Configuration::updateValue('PAYPAL_FEE_DETAIL', Tools::getValue('feedetail'));				Configuration::updateValue('PAYPAL_CONFIRMATION', Tools::getValue('paypal_confirmation'));				Configuration::updateValue('PAYPAL_METHOD', Tools::getValue('paypal_method'));				$this->context->smarty->assign('PayPal_save_success', true);			}			else			{				$this->context->controller->errors = $this->_errors;				$this->_html = $this->displayError(implode('<br />', $this->_errors)); // Not displayed at this time				//$this->context->smarty->assign('PayPal_save_failure', false);			}		}		return $this->loadLangDefault();	}	private function _makeRefund($id_transaction, $id_order, $amt = false)	{		if (!$this->isPayPalAPIAvailable())			die(Tools::displayError('Fatal Error: no API Credentials are available'));		elseif (!$id_transaction)			die(Tools::displayError('Fatal Error: id_transaction is null'));		if (!$amt)			$params = array('TRANSACTIONID' => $id_transaction, 'REFUNDTYPE' => 'Full');		else		{			$iso_currency = Db::getInstance()->getValue('				SELECT `iso_code`				FROM `'._DB_PREFIX_.'orders` o				LEFT JOIN `'._DB_PREFIX_.'currency` c ON (o.`id_currency` = c.`id_currency`)				WHERE o.`id_order` = '.(int)$id_order);			$params = array('TRANSACTIONID'	=> $id_transaction,	'REFUNDTYPE' => 'Partial', 'AMT' => (float)$amt, 'CURRENCYCODE' => Tools::strtoupper($iso_currency));		}		$paypal_lib	= new PaypalLib();		return $paypal_lib->makeCall($this->getAPIURL(), $this->getAPIScript(), 'RefundTransaction', '&'.http_build_query($params, '', '&'));	}	public function _addNewPrivateMessage($id_order, $message)	{		if (!(bool)$id_order)			return false;		$new_message = new Message();		$message = strip_tags($message, '<br>');		if (!Validate::isCleanHtml($message))			$message = $this->l('Payment message is not valid, please check your module.');		$new_message->message = $message;		$new_message->id_order = (int)$id_order;		$new_message->private = 1;		return $new_message->add();	}	private function _doTotalRefund($id_order)	{		$paypal_order = PayPalOrder::getOrderById((int)$id_order);		if (!$this->isPayPalAPIAvailable() || !$paypal_order)			return false;		$order = new Order((int)$id_order);		if (!Validate::isLoadedObject($order))			return false;		$products = $order->getProducts();		$currency = new Currency((int)$order->id_currency);		if (!Validate::isLoadedObject($currency))			$this->_errors[] = $this->l('Not a valid currency');		if (count($this->_errors))			return false;		$decimals = (is_array($currency) ? (int)$currency['decimals'] : (int)$currency->decimals) * _PS_PRICE_DISPLAY_PRECISION_;		// Amount for refund		$amt = 0.00;		foreach ($products as $product)			$amt += (float)($product['product_price_wt']) * ($product['product_quantity'] - $product['product_quantity_refunded']);		$amt += (float)($order->total_shipping) + (float)($order->total_wrapping) - (float)($order->total_discounts) + (float)($order->payment_fee);		// check if total or partial		if (Tools::ps_round($order->total_paid_real, $decimals) == Tools::ps_round($amt, $decimals))			$response = $this->_makeRefund($paypal_order['id_transaction'], $id_order);		else			$response = $this->_makeRefund($paypal_order['id_transaction'], $id_order, (float)($amt));		$message = $this->l('Refund operation result:').'<br>';		foreach ($response as $key => $value)			$message .= $key.': '.$value.'<br>';		if (array_key_exists('ACK', $response) && $response['ACK'] == 'Success' && $response['REFUNDTRANSACTIONID'] != '')		{			$message .= $this->l('PayPal refund successful!');			if (!Db::getInstance()->Execute('UPDATE `'._DB_PREFIX_.'paypal_order` SET `payment_status` = \'Refunded\' WHERE `id_order` = '.(int)$id_order))				die(Tools::displayError('Error when updating PayPal database'));			$history = new OrderHistory();			$history->id_order = (int)$id_order;			$history->changeIdOrderState((int)Configuration::get('PS_OS_REFUND'), $history->id_order);			$history->addWithemail();			$history->save();		}		else			$message .= $this->l('Transaction error!');		$this->_addNewPrivateMessage((int)$id_order, $message);		Tools::redirect($_SERVER['HTTP_REFERER']);	}	private function _doCapture($id_order, $capture_amount = false, $is_complete = false)	{		$paypal_order = PayPalOrder::getOrderById((int)$id_order);		if (!$this->isPayPalAPIAvailable() || !$paypal_order)			return false;				$order = new Order((int)$id_order);		$currency = new Currency((int)$order->id_currency);				if (!$capture_amount)			$capture_amount = (float)$order->total_paid;		$complete = 'Complete';		if (!$is_complete)			$complete = 'NotComplete';		$paypal_lib	= new PaypalLib();		$response = $paypal_lib->makeCall($this->getAPIURL(), $this->getAPIScript(), 'DoCapture',			'&'.http_build_query(array('AMT' => $capture_amount, 'AUTHORIZATIONID' => $paypal_order['id_transaction'],			'CURRENCYCODE' => $currency->iso_code, 'COMPLETETYPE' => $complete), '', '&'));		$message = $this->l('Capture operation result:').'<br>';		foreach ($response as $key => $value)			$message .= $key.': '.$value.'<br>';				$capture = new PaypalCapture();		$capture->id_order = (int)$id_order;		$capture->capture_amount = (float)$capture_amount;		if ((array_key_exists('ACK', $response)) && ($response['ACK'] == 'Success') && ($response['PAYMENTSTATUS'] == 'Completed'))		{			$capture->result = pSQL($response['PAYMENTSTATUS']);			if ($capture->save())			{				if (!($capture->getRestToCapture($capture->id_order)))				{					//plus d'argent a capturer					if (!Db::getInstance()->Execute('					UPDATE `'._DB_PREFIX_.'paypal_order`					SET `capture` = 0, `payment_status` = \''.pSQL($response['PAYMENTSTATUS']).'\', `id_transaction` = \''.pSQL($response['TRANSACTIONID']).'\'					WHERE `id_order` = '.(int)$id_order))					die(Tools::displayError('Error when updating PayPal database'));					$order_history = new OrderHistory();					$order_history->id_order = (int)$id_order;					if (version_compare(_PS_VERSION_, '1.5', '<'))						$order_history->changeIdOrderState(Configuration::get('PS_OS_WS_PAYMENT'), (int)$id_order);					else						$order_history->changeIdOrderState(Configuration::get('PS_OS_WS_PAYMENT'), $order);					$order_history->addWithemail();					$message .= $this->l('Order finished with PayPal!');				}			}					}		elseif (isset($response['PAYMENTSTATUS']))		{			$capture->result = pSQL($response['PAYMENTSTATUS']);			$capture->save();			$message .= $this->l('Transaction error!');		}				$this->_addNewPrivateMessage((int)$id_order, $message);		Tools::redirect($_SERVER['HTTP_REFERER']);	}	private function _updatePaymentStatusOfOrder($id_order)	{		if (!(bool)$id_order || !$this->isPayPalAPIAvailable())			return false;		$paypal_order = PayPalOrder::getOrderById((int)$id_order);		if (!$paypal_order)			return false;		$paypal_lib	= new PaypalLib();		$response = $paypal_lib->makeCall($this->getAPIURL(), $this->getAPIScript(), 'GetTransactionDetails',			'&'.http_build_query(array('TRANSACTIONID' => $paypal_order['id_transaction']), '', '&'));		if (array_key_exists('ACK', $response))		{			if ($response['ACK'] == 'Success' && isset($response['PAYMENTSTATUS']))			{				$history = new OrderHistory();				$history->id_order = (int)$id_order;				if ($response['PAYMENTSTATUS'] == 'Completed')					$history->changeIdOrderState(Configuration::get('PS_OS_PAYMENT'), (int)$id_order);				elseif (($response['PAYMENTSTATUS'] == 'Pending') && ($response['PENDINGREASON'] == 'authorization'))					$history->changeIdOrderState((int)(Configuration::get('PAYPAL_OS_AUTHORIZATION')), (int)$id_order);				elseif ($response['PAYMENTSTATUS'] == 'Reversed')					$history->changeIdOrderState(Configuration::get('PS_OS_ERROR'), (int)$id_order);				$history->addWithemail();				if (!Db::getInstance()->Execute('				UPDATE `'._DB_PREFIX_.'paypal_order`				SET `payment_status` = \''.pSQL($response['PAYMENTSTATUS']).($response['PENDINGREASON'] == 'authorization' ? '_authorization' : '').'\'				WHERE `id_order` = '.(int)$id_order))					die(Tools::displayError('Error when updating PayPal database'));			}			$message = $this->l('Verification status :').'<br>';			$this->formatMessage($response, $message);			$this->_addNewPrivateMessage((int)$id_order, $message);			return $response;		}		return false;	}	public function fetchTemplate($name)	{		if (version_compare(_PS_VERSION_, '1.4', '<'))			$this->context->smarty->currentTemplate = $name;		elseif (version_compare(_PS_VERSION_, '1.5', '<'))		{			$views = 'views/templates/';			if (@filemtime(dirname(__FILE__).'/'.$name))				return $this->display(__FILE__, $name);			elseif (@filemtime(dirname(__FILE__).'/'.$views.'hook/'.$name))				return $this->display(__FILE__, $views.'hook/'.$name);			elseif (@filemtime(dirname(__FILE__).'/'.$views.'front/'.$name))				return $this->display(__FILE__, $views.'front/'.$name);			elseif (@filemtime(dirname(__FILE__).'/'.$views.'admin/'.$name))				return $this->display(__FILE__, $views.'admin/'.$name);		}		return $this->display(__FILE__, $name);	}	public static function getPayPalCustomerIdByEmail($email)	{		return Db::getInstance()->getValue('			SELECT `id_customer`			FROM `'._DB_PREFIX_.'paypal_customer`			WHERE paypal_email = \''.pSQL($email).'\'');	}	public static function getPayPalEmailByIdCustomer($id_customer)	{		return Db::getInstance()->getValue('			SELECT `paypal_email`			FROM `'._DB_PREFIX_.'paypal_customer`			WHERE `id_customer` = '.(int)$id_customer);	}	public static function addPayPalCustomer($id_customer, $email)	{		if (!PayPal::getPayPalEmailByIdCustomer($id_customer))		{			Db::getInstance()->Execute('				INSERT INTO `'._DB_PREFIX_.'paypal_customer` (`id_customer`, `paypal_email`)				VALUES('.(int)$id_customer.', \''.pSQL($email).'\')');			return Db::getInstance()->Insert_ID();		}		return false;	}	private function warningsCheck()	{		if (Configuration::get('PAYPAL_PAYMENT_METHOD') == HSS && Configuration::get('PAYPAL_BUSINESS_ACCOUNT') == 'paypal@prestashop.com')			$this->warning = $this->l('You are currently using the default PayPal e-mail address, please enter your own e-mail address.').'<br />';		/* Check preactivation warning */		if (Configuration::get('PS_PREACTIVATION_PAYPAL_WARNING'))			$this->warning .= (!empty($this->warning)) ? ', ' : Configuration::get('PS_PREACTIVATION_PAYPAL_WARNING').'<br />';		if (!function_exists('curl_init'))			$this->warning .= $this->l('In order to use your module, please activate cURL (PHP extension)');	}	private function loadLangDefault()	{		$paypal_country_default	= (int)Configuration::get('PAYPAL_COUNTRY_DEFAULT');		$this->default_country	= ($paypal_country_default ? (int)$paypal_country_default : (int)Configuration::get('PS_COUNTRY_DEFAULT'));		$this->iso_code	= $this->getCountryDependency(Tools::strtoupper($this->context->language->iso_code));	}	public function formatMessage($response, &$message)	{		foreach ($response as $key => $value)			$message .= $key.': '.$value.'<br>';	}	private function checkCurrency($cart)	{		$currency_module = $this->getCurrency((int)$cart->id_currency);		if ((int)$cart->id_currency == (int)$currency_module->id)			return true;		else			return false;	}	public static function getShopDomainSsl($http = false, $entities = false)	{		if (method_exists('Tools', 'getShopDomainSsl'))			return Tools::getShopDomainSsl($http, $entities);		else		{			if (!($domain = Configuration::get('PS_SHOP_DOMAIN_SSL')))				$domain = self::getHttpHost();			if ($entities)				$domain = htmlspecialchars($domain, ENT_COMPAT, 'UTF-8');			if ($http)				$domain = (Configuration::get('PS_SSL_ENABLED') ? 'https://' : 'http://').$domain;			return $domain;		}	}	public function validateOrder($id_cart, $id_order_state, $amount_paid, $payment_method = 'Unknown', $message = null, $transaction = array(), $currency_special = null, $dont_touch_amount = false, $secure_key = false, Shop $shop = null)	{		if ($this->active)		{			// Set transaction details if pcc is defined in PaymentModule class_exists			if (isset($this->pcc))				$this->pcc->transaction_id = (isset($transaction['transaction_id']) ? $transaction['transaction_id'] : '');				$this->validateOrderMegaPaypal((int)$id_cart, (int)$id_order_state, (float)$amount_paid, $payment_method, $message, $transaction, $currency_special, $dont_touch_amount, $secure_key, $shop);			if (count($transaction) > 0)				PayPalOrder::saveOrder((int)$this->currentOrder, $transaction);			$this->setPayPalAsConfigured();		}	}	protected function getGiftWrappingPrice()	{		if (version_compare(_PS_VERSION_, '1.5.3.0', '>='))			$wrapping_fees_tax_inc = $this->context->cart->getGiftWrappingPrice();		else		{			$wrapping_fees = (float)(Configuration::get('PS_GIFT_WRAPPING_PRICE'));			$wrapping_fees_tax = new Tax((int)(Configuration::get('PS_GIFT_WRAPPING_TAX')));			$wrapping_fees_tax_inc = $wrapping_fees * (1 + (((float)($wrapping_fees_tax->rate) / 100)));		}		return (float)Tools::convertPrice($wrapping_fees_tax_inc, $this->context->currency);	}	public function redirectToConfirmation()	{		$shop_url = PayPal::getShopDomainSsl(true, true);		// Check if user went through the payment preparation detail and completed it		$detail = unserialize($this->context->cookie->express_checkout);		if (!empty($detail['payer_id']) && !empty($detail['token']))		{			$values = array('get_confirmation' => true);			$link = $shop_url._MODULE_DIR_.$this->name.'/express_checkout/payment.php';			if (version_compare(_PS_VERSION_, '1.5', '<'))				Tools::redirectLink($link.'?'.http_build_query($values, '', '&'));			else				Tools::redirect(Context::getContext()->link->getModuleLink('paypal', 'confirm', $values));		}	}	/**	 * Check if the current page use SSL connection on not	 *	 * @return bool uses SSL	 */	public function usingSecureMode()	{		if (isset($_SERVER['HTTPS']))			return ($_SERVER['HTTPS'] == 1 || Tools::strtolower($_SERVER['HTTPS']) == 'on');		// $_SERVER['SSL'] exists only in some specific configuration		if (isset($_SERVER['SSL']))			return ($_SERVER['SSL'] == 1 || Tools::strtolower($_SERVER['SSL']) == 'on');		return false;	}	protected function getCurrentUrl()	{		$protocol_link = $this->usingSecureMode() ? 'https://' : 'http://';		$request = $_SERVER['REQUEST_URI'];		$pos = strpos($request, '?');		if (($pos !== false) && ($pos >= 0))			$request = Tools::substr($request, 0, $pos);		$params = urlencode($_SERVER['QUERY_STRING']);		return $protocol_link.Tools::getShopDomainSsl().$request.'?'.$params;	}	/**	 * Use $this->comp instead of bccomp which is not added in all versions of PHP	 * @param float $num1  number 1 to compare	 * @param float $num2  number 2 to compare	 * @param [type] $scale [description]	 */	public function comp($num1, $num2, $scale = null)	{		// check if they're valid positive numbers, extract the whole numbers and decimals		if (!preg_match("/^\+?(\d+)(\.\d+)?$/", $num1, $tmp1) || !preg_match("/^\+?(\d+)(\.\d+)?$/", $num2, $tmp2))			return ('0');		// remove leading zeroes from whole numbers		$num1 = ltrim($tmp1[1], '0');		$num2 = ltrim($tmp2[1], '0');		// first, we can just check the lengths of the numbers, this can help save processing time		// if $num1 is longer than $num2, return 1.. vice versa with the next step.		if (Tools::strlen($num1) > Tools::strlen($num2))			return 1;		else		{			if (Tools::strlen($num1) < Tools::strlen($num2))				return -1;			// if the two numbers are of equal length, we check digit-by-digit			else			{				// remove ending zeroes from decimals and remove point				$dec1 = isset($tmp1[2]) ? rtrim(Tools::substr($tmp1[2], 1), '0') : '';				$dec2 = isset($tmp2[2]) ? rtrim(Tools::substr($tmp2[2], 1), '0') : '';				// if the user defined $scale, then make sure we use that only				if ($scale != null)				{					$dec1 = Tools::substr($dec1, 0, $scale);					$dec2 = Tools::substr($dec2, 0, $scale);				}				// calculate the longest length of decimals				$d_len = max(Tools::strlen($dec1), Tools::strlen($dec2));				// append the padded decimals onto the end of the whole numbers				$num1 .= str_pad($dec1, $d_len, '0');				$num2 .= str_pad($dec2, $d_len, '0');				// check digit-by-digit, if they have a difference, return 1 or -1 (greater/lower than)				for ($i = 0; $i < Tools::strlen($num1); $i++)				{					if ((int)$num1{$i} > (int)$num2{$i})						return 1;					elseif((int)$num1{$i} < (int)$num2{$i})				 	 	return -1;				}				// if the two numbers have no difference (they're the same).. return 0				return 0;			}		}	}		public function validateOrderMegaPaypal($id_cart, $id_order_state, $amount_paid, $payment_method = 'Unknown',		$message = null, $extra_vars = array(), $currency_special = null, $dont_touch_amount = false,		$secure_key = false, Shop $shop = null)	{		$this->context->cart = new Cart($id_cart);		$CODfee = (float)$this->getCost($this->context->cart);		if($CODfee==0)		{			return parent::validateOrder($id_cart, $id_order_state, $amount_paid,$payment_method, $message , $extra_vars , $currency_special , $dont_touch_amount, 	$secure_key, $shop);		}				$this->context->customer = new Customer($this->context->cart->id_customer);		$this->context->language = new Language($this->context->cart->id_lang);		$this->context->shop = ($shop ? $shop : new Shop($this->context->cart->id_shop));		$id_currency = $currency_special ? (int)$currency_special : (int)$this->context->cart->id_currency;		$this->context->currency = new Currency($id_currency, null, $this->context->shop->id);		if (Configuration::get('PS_TAX_ADDRESS_TYPE') == 'id_address_delivery')			$context_country = $this->context->country;		$order_status = new OrderState((int)$id_order_state, (int)$this->context->language->id);		if (!Validate::isLoadedObject($order_status))			throw new PrestaShopException('Can\'t load Order state status');		if (!$this->active)			die(Tools::displayError());		// Does order already exists ?		if (Validate::isLoadedObject($this->context->cart) && $this->context->cart->OrderExists() == false)		{			if ($secure_key !== false && $secure_key != $this->context->cart->secure_key)				die(Tools::displayError());			// For each package, generate an order			$delivery_option_list = $this->context->cart->getDeliveryOptionList();			$package_list = $this->context->cart->getPackageList();			$cart_delivery_option = $this->context->cart->getDeliveryOption();			// If some delivery options are not defined, or not valid, use the first valid option			foreach ($delivery_option_list as $id_address => $package)				if (!isset($cart_delivery_option[$id_address]) || !array_key_exists($cart_delivery_option[$id_address], $package))					foreach ($package as $key => $val)					{						$cart_delivery_option[$id_address] = $key;						break;					}			$order_list = array();			$order_detail_list = array();			$reference = Order::generateReference();			$this->currentOrderReference = $reference;			$order_creation_failed = false;			$cart_total_paid = (float)Tools::ps_round((float)$this->context->cart->getOrderTotal(true, Cart::BOTH)+ $CODfee, 2);			if ($this->context->cart->orderExists())			{				$error = Tools::displayError('An order has already been placed using this cart.');				Logger::addLog($error, 4, '0000001', 'Cart', intval($this->context->cart->id));				die($error);			}			foreach ($cart_delivery_option as $id_address => $key_carriers)				foreach ($delivery_option_list[$id_address][$key_carriers]['carrier_list'] as $id_carrier => $data)					foreach ($data['package_list'] as $id_package){						// Rewrite the id_warehouse						if(method_exists('Cart','getPackageIdWarehouse'))							$package_list[$id_address][$id_package]['id_warehouse'] = (int)$this->context->cart->getPackageIdWarehouse($package_list[$id_address][$id_package], (int)$id_carrier);						$package_list[$id_address][$id_package]['id_carrier'] = $id_carrier;					}			// Make sure CarRule caches are empty			CartRule::cleanCache();			$with_fee = false;			foreach ($package_list as $id_address => $packageByAddress)				foreach ($packageByAddress as $id_package => $package)				{					$order = new Order();					$order->product_list = $package['product_list'];										if (Configuration::get('PS_TAX_ADDRESS_TYPE') == 'id_address_delivery')					{						$address = new Address($id_address);						$this->context->country = new Country($address->id_country, $this->context->cart->id_lang);					}										$carrier = null;					if (!$this->context->cart->isVirtualCart() && isset($package['id_carrier']))					{						$carrier = new Carrier($package['id_carrier'], $this->context->cart->id_lang);						$order->id_carrier = (int)$carrier->id;						$id_carrier = (int)$carrier->id;					}					else					{						$order->id_carrier = 0;						$id_carrier = 0;					}										$order->id_customer = (int)$this->context->cart->id_customer;					$order->id_address_invoice = (int)$this->context->cart->id_address_invoice;					$order->id_address_delivery = (int)$id_address;					$order->id_currency = $this->context->currency->id;					$order->id_lang = (int)$this->context->cart->id_lang;					$order->id_cart = (int)$this->context->cart->id;					$order->reference = $reference;					$order->id_shop = (int)$this->context->shop->id;					$order->id_shop_group = (int)$this->context->shop->id_shop_group;					$order->secure_key = ($secure_key ? pSQL($secure_key) : pSQL($this->context->customer->secure_key));					$order->payment = $payment_method;					$order->module = $this->name;					$order->recyclable = $this->context->cart->recyclable;					$order->gift = (int)$this->context->cart->gift;					$order->gift_message = $this->context->cart->gift_message;					$order->conversion_rate = $this->context->currency->conversion_rate;								/* Solo aplicamos el fee en el primer paquete para que no lo aplique en todos */				if(!$with_fee){					$amount_paid = !$dont_touch_amount ? Tools::ps_round((float)($amount_paid + $CODfee), 2) : ($amount_paid + $CODfee);					$with_fee = true;				}					$order->total_paid_real = 0;										$order->total_products = (float)$this->context->cart->getOrderTotal(false, Cart::ONLY_PRODUCTS, $order->product_list, $id_carrier);					$order->total_products_wt = (float)$this->context->cart->getOrderTotal(true, Cart::ONLY_PRODUCTS, $order->product_list, $id_carrier);					$order->total_discounts_tax_excl = (float)abs($this->context->cart->getOrderTotal(false, Cart::ONLY_DISCOUNTS, $order->product_list, $id_carrier));					$order->total_discounts_tax_incl = (float)abs($this->context->cart->getOrderTotal(true, Cart::ONLY_DISCOUNTS, $order->product_list, $id_carrier));					$order->total_discounts = $order->total_discounts_tax_incl;					$order->total_shipping_tax_excl = (float)$this->context->cart->getPackageShippingCost((int)$id_carrier, false, null, $order->product_list);					$order->total_shipping_tax_incl = (float)$this->context->cart->getPackageShippingCost((int)$id_carrier, true, null, $order->product_list);					$order->total_shipping = $order->total_shipping_tax_incl;										if (!is_null($carrier) && Validate::isLoadedObject($carrier))						$order->carrier_tax_rate = $carrier->getTaxesRate(new Address($this->context->cart->{Configuration::get('PS_TAX_ADDRESS_TYPE')}));					$order->total_wrapping_tax_excl = (float)abs($this->context->cart->getOrderTotal(false, Cart::ONLY_WRAPPING, $order->product_list, $id_carrier));					$order->total_wrapping_tax_incl = (float)abs($this->context->cart->getOrderTotal(true, Cart::ONLY_WRAPPING, $order->product_list, $id_carrier));					$order->total_wrapping = $order->total_wrapping_tax_incl;										// Tax for PaypalFee                                       $paypal_tax_id = (int)Configuration::get('PAYPAL_TAX');                                                                              if($paypal_tax_id>0){                                            $tax_manager = new TaxRulesTaxManager(new Address($order->id_address_invoice), $paypal_tax_id);                                            $product_tax_calculator = $tax_manager->getTaxCalculator();                                            $order->payment_fee_rate = (float)Tools::ps_round($product_tax_calculator->getTotalRate(),2);                                        }					else{                                                                                      $order->payment_fee_rate = 0;                                                                                          }					$totalpaid_tax_exc = (float)Tools::ps_round((float)$this->context->cart->getOrderTotal(false, Cart::BOTH, $order->product_list, $id_carrier), 2);					$totalpaid_tax_exc = $totalpaid_tax_exc + ($CODfee / (1+($order->payment_fee_rate/100)));					$order->total_paid_tax_excl = (float)Tools::ps_round($totalpaid_tax_exc,2);										$totalpaid = (float)Tools::ps_round((float)$this->context->cart->getOrderTotal(true, Cart::BOTH, $order->product_list, $id_carrier), 2);					$totalpaid= $totalpaid + $CODfee;										$order->payment_fee = abs((float)Tools::ps_round($CODfee,2));					$order->total_paid_tax_incl = (float)Tools::ps_round($totalpaid,2);					$order->total_paid = $order->total_paid_tax_incl;					$order->invoice_date = '0000-00-00 00:00:00';					$order->delivery_date = '0000-00-00 00:00:00';										// Creating order					$result = $order->add();					if (!$result)						throw new PrestaShopException('Can\'t save Order');					// Amount paid by customer is not the right one -> Status = payment error					// We don't use the following condition to avoid the float precision issues : http://www.php.net/manual/en/language.types.float.php					// if ($order->total_paid != $order->total_paid_real)					// We use number_format in order to compare two string					if ($order_status->logable && number_format($cart_total_paid, 2) != number_format($amount_paid, 2))						$id_order_state = Configuration::get('PS_OS_ERROR');					$order_list[] = $order;					// Insert new Order detail list using cart for the current order					$order_detail = new OrderDetail(null, null, $this->context);					$order_detail->createList($order, $this->context->cart, $id_order_state, $order->product_list, 0, true, $package_list[$id_address][$id_package]['id_warehouse']);					$order_detail_list[] = $order_detail;					// Adding an entry in order_carrier table					if (!is_null($carrier))					{						$order_carrier = new OrderCarrier();						$order_carrier->id_order = (int)$order->id;						$order_carrier->id_carrier = (int)$id_carrier;						$order_carrier->weight = (float)$order->getTotalWeight();						$order_carrier->shipping_cost_tax_excl = (float)$order->total_shipping_tax_excl;						$order_carrier->shipping_cost_tax_incl = (float)$order->total_shipping_tax_incl;						$order_carrier->add();					}				}						// The country can only change if the address used for the calculation is the delivery address, and if multi-shipping is activated			if (Configuration::get('PS_TAX_ADDRESS_TYPE') == 'id_address_delivery')				$this->context->country = $context_country;			// Register Payment only if the order status validate the order			if ($order_status->logable)			{				// $order is the last order loop in the foreach				// The method addOrderPayment of the class Order make a create a paymentOrder				//     linked to the order reference and not to the order id				if (isset($extra_vars['transaction_id']))					$transaction_id = $extra_vars['transaction_id'];				else					$transaction_id = null;								if (!$order->addOrderPayment($amount_paid, null, $transaction_id))					throw new PrestaShopException('Can\'t save Order Payment');			}			// Next !			$only_one_gift = false;			$cart_rule_used = array();			$products = $this->context->cart->getProducts();			$cart_rules = $this->context->cart->getCartRules();						// Make sure CarRule caches are empty			CartRule::cleanCache();						foreach ($order_detail_list as $key => $order_detail)			{				$order = $order_list[$key];				if (!$order_creation_failed & isset($order->id))				{					if (!$secure_key)						$message .= '<br />'.Tools::displayError('Warning: the secure key is empty, check your payment account before validation');					// Optional message to attach to this order					if (isset($message) & !empty($message))					{						$msg = new Message();						$message = strip_tags($message, '<br>');						if (Validate::isCleanHtml($message))						{							$msg->message = $message;							$msg->id_order = intval($order->id);							$msg->private = 1;							$msg->add();						}					}					// Insert new Order detail list using cart for the current order					//$orderDetail = new OrderDetail(null, null, $this->context);					//$orderDetail->createList($order, $this->context->cart, $id_order_state);					// Construct order detail table for the email					$products_list = '';					$virtual_product = true;					foreach ($products as $key => $product)					{						$price = Product::getPriceStatic((int)$product['id_product'], false, ($product['id_product_attribute'] ? (int)$product['id_product_attribute'] : null), 6, null, false, true, $product['cart_quantity'], false, (int)$order->id_customer, (int)$order->id_cart, (int)$order->{Configuration::get('PS_TAX_ADDRESS_TYPE')});						$price_wt = Product::getPriceStatic((int)$product['id_product'], true, ($product['id_product_attribute'] ? (int)$product['id_product_attribute'] : null), 2, null, false, true, $product['cart_quantity'], false, (int)$order->id_customer, (int)$order->id_cart, (int)$order->{Configuration::get('PS_TAX_ADDRESS_TYPE')});						$customization_quantity = 0;						if (isset($customized_datas[$product['id_product']][$product['id_product_attribute']]))						{							$customization_text = '';							foreach ($customized_datas[$product['id_product']][$product['id_product_attribute']] as $customization)							{								if (isset($customization['datas'][Product::CUSTOMIZE_TEXTFIELD]))									foreach ($customization['datas'][Product::CUSTOMIZE_TEXTFIELD] as $text)										$customization_text .= $text['name'].': '.$text['value'].'<br />';								if (isset($customization['datas'][Product::CUSTOMIZE_FILE]))									$customization_text .= sprintf(Tools::displayError('%d image(s)'), count($customization['datas'][Product::CUSTOMIZE_FILE])).'<br />';								$customization_text .= '---<br />';							}							$customization_text = rtrim($customization_text, '---<br />');							$customization_quantity = (int)$product['customizationQuantityTotal'];							$products_list .=							'<tr style="background-color: '.($key % 2 ? '#DDE2E6' : '#EBECEE').';">								<td style="padding: 0.6em 0.4em;">'.$product['reference'].'</td>								<td style="padding: 0.6em 0.4em;"><strong>'.$product['name'].(isset($product['attributes']) ? ' - '.$product['attributes'] : '').' - '.Tools::displayError('Customized').(!empty($customization_text) ? ' - '.$customization_text : '').'</strong></td>								<td style="padding: 0.6em 0.4em; text-align: right;">'.Tools::displayPrice(Product::getTaxCalculationMethod() == PS_TAX_EXC ?  Tools::ps_round($price, 2) : $price_wt, $this->context->currency, false).'</td>								<td style="padding: 0.6em 0.4em; text-align: center;">'.$customization_quantity.'</td>								<td style="padding: 0.6em 0.4em; text-align: right;">'.Tools::displayPrice($customization_quantity * (Product::getTaxCalculationMethod() == PS_TAX_EXC ? Tools::ps_round($price, 2) : $price_wt), $this->context->currency, false).'</td>							</tr>';						}						if (!$customization_quantity || (int)$product['cart_quantity'] > $customization_quantity)							$products_list .=							'<tr style="background-color: '.($key % 2 ? '#DDE2E6' : '#EBECEE').';">								<td style="padding: 0.6em 0.4em;">'.$product['reference'].'</td>								<td style="padding: 0.6em 0.4em;"><strong>'.$product['name'].(isset($product['attributes']) ? ' - '.$product['attributes'] : '').'</strong></td>								<td style="padding: 0.6em 0.4em; text-align: right;">'.Tools::displayPrice(Product::getTaxCalculationMethod() == PS_TAX_EXC ? Tools::ps_round($price, 2) : $price_wt, $this->context->currency, false).'</td>								<td style="padding: 0.6em 0.4em; text-align: center;">'.((int)$product['cart_quantity'] - $customization_quantity).'</td>								<td style="padding: 0.6em 0.4em; text-align: right;">'.Tools::displayPrice(((int)$product['cart_quantity'] - $customization_quantity) * (Product::getTaxCalculationMethod() == PS_TAX_EXC ? Tools::ps_round($price, 2) : $price_wt), $this->context->currency, false).'</td>							</tr>';						// Check if is not a virutal product for the displaying of shipping						if (!$product['is_virtual'])							$virtual_product &= false;					} // end foreach ($products)					// Add fee to email					if($order->payment_fee!=0)					{						$pricepayment  = Tools::displayPrice($order->payment_fee, $this->context->currency, false);						$products_list .=						'<tr style="background-color: #EBECEE;">								<td style="padding: 0.6em 0.4em;width: 15%;"></td>								<td style="padding: 0.6em 0.4em;width: 30%; text-align:right;"><strong>'.$this->l('Fee').'</strong></td>								<td style="padding: 0.6em 0.4em; width: 20%; text-align:right;">'.$pricepayment.'</td>								<td style="padding: 0.6em 0.4em; width: 15%; text-align:center;">1</td>								<td style="padding: 0.6em 0.4em; width: 20%; text-align:right;">'.$pricepayment.'</td>							</tr>';					}					$cart_rules_list = '';					foreach ($cart_rules as $cart_rule)					{						$package = array('id_carrier' => $order->id_carrier, 'id_address' => $order->id_address_delivery, 'products' => $order->product_list);						$values = array(							'tax_incl' => $cart_rule['obj']->getContextualValue(true, $this->context, CartRule::FILTER_ACTION_ALL, $package),							'tax_excl' => $cart_rule['obj']->getContextualValue(false, $this->context, CartRule::FILTER_ACTION_ALL, $package)						);						// If the reduction is not applicable to this order, then continue with the next one						if (!$values['tax_excl'])							continue;						$order->addCartRule($cart_rule['obj']->id, $cart_rule['obj']->name, $values);						/* IF						** - This is not multi-shipping						** - The value of the voucher is greater than the total of the order						** - Partial use is allowed						** - This is an "amount" reduction, not a reduction in % or a gift						** THEN						** The voucher is cloned with a new value corresponding to the remainder						*/						if (count($order_list) == 1 && $values['tax_incl'] > $order->total_products_wt && $cart_rule['obj']->partial_use == 1 && $cart_rule['obj']->reduction_amount > 0)						{							// Create a new voucher from the original							$voucher = new CartRule($cart_rule['obj']->id); // We need to instantiate the CartRule without lang parameter to allow saving it							unset($voucher->id);							// Set a new voucher code							$voucher->code = empty($voucher->code) ? substr(md5($order->id.'-'.$order->id_customer.'-'.$cart_rule['obj']->id), 0, 16) : $voucher->code.'-2';							if (preg_match('/\-([0-9]{1,2})\-([0-9]{1,2})$/', $voucher->code, $matches) && $matches[1] == $matches[2])								$voucher->code = preg_replace('/'.$matches[0].'$/', '-'.(intval($matches[1]) + 1), $voucher->code);							// Set the new voucher value							if ($voucher->reduction_tax)								$voucher->reduction_amount = $values['tax_incl'] - $order->total_products_wt;							else								$voucher->reduction_amount = $values['tax_excl'] - $order->total_products;							$voucher->id_customer = $order->id_customer;							$voucher->quantity = 1;							if ($voucher->add())							{								// If the voucher has conditions, they are now copied to the new voucher								CartRule::copyConditions($cart_rule['obj']->id, $voucher->id);								$params = array(									'{voucher_amount}' => Tools::displayPrice($voucher->reduction_amount, $this->context->currency, false),									'{voucher_num}' => $voucher->code,									'{firstname}' => $this->context->customer->firstname,									'{lastname}' => $this->context->customer->lastname,									'{id_order}' => $order->reference,									'{order_name}' => $order->getUniqReference()								);								Mail::Send(									(int)$order->id_lang,									'voucher',									sprintf(Mail::l('New voucher regarding your order %s', (int)$order->id_lang), $order->reference),									$params,									$this->context->customer->email,									$this->context->customer->firstname.' '.$this->context->customer->lastname,									null, null, null, null, _PS_MAIL_DIR_, false, (int)$order->id_shop								);							}						}						if ($id_order_state != Configuration::get('PS_OS_ERROR') && $id_order_state != Configuration::get('PS_OS_CANCELED') && !in_array($cart_rule['obj']->id, $cart_rule_used))						{							$cart_rule_used[] = $cart_rule['obj']->id;							// Create a new instance of Cart Rule without id_lang, in order to update its quantity							$cart_rule_to_update = new CartRule($cart_rule['obj']->id);							$cart_rule_to_update->quantity = max(0, $cart_rule_to_update->quantity - 1);							$cart_rule_to_update->update();						}						$cart_rules_list .= '						<tr style="background-color:#EBECEE;">							<td colspan="4" style="padding:0.6em 0.4em;text-align:right">'.Tools::displayError('Voucher name:').' '.$cart_rule['obj']->name.'</td>							<td style="padding:0.6em 0.4em;text-align:right">'.($values['tax_incl'] != 0.00 ? '-' : '').Tools::displayPrice($values['tax_incl'], $this->context->currency, false).'</td>						</tr>';					}					// Specify order id for message					$old_message = Message::getMessageByCartId((int)$this->context->cart->id);					if ($old_message)					{						$message = new Message((int)$old_message['id_message']);						$message->id_order = (int)$order->id;						$message->update();						// Add this message in the customer thread						$customer_thread = new CustomerThread();						$customer_thread->id_contact = 0;						$customer_thread->id_customer = (int)$order->id_customer;						$customer_thread->id_shop = (int)$this->context->shop->id;						$customer_thread->id_order = (int)$order->id;						$customer_thread->id_lang = (int)$this->context->language->id;						$customer_thread->email = $this->context->customer->email;						$customer_thread->status = 'open';						$customer_thread->token = Tools::passwdGen(12);						$customer_thread->add();						$customer_message = new CustomerMessage();						$customer_message->id_customer_thread = $customer_thread->id;						$customer_message->id_employee = 0;						$customer_message->message = htmlentities($message->message, ENT_COMPAT, 'UTF-8');						$customer_message->private = 0;						if (!$customer_message->add())							$this->errors[] = Tools::displayError('An error occurred while saving message');					}					// Hook validate order					Hook::exec('actionValidateOrder', array(						'cart' => $this->context->cart,						'order' => $order,						'customer' => $this->context->customer,						'currency' => $this->context->currency,						'orderStatus' => $order_status					));					foreach ($this->context->cart->getProducts() as $product)						if ($order_status->logable)							ProductSale::addProductSale((int)$product['id_product'], (int)$product['cart_quantity']);					if (Configuration::get('PS_STOCK_MANAGEMENT') && $order_detail->getStockState())					{						$history = new OrderHistory();						$history->id_order = (int)$order->id;						$history->changeIdOrderState(Configuration::get('PS_OS_OUTOFSTOCK'), $order, true);						$history->addWithemail();					}					// Set order state in order history ONLY even if the "out of stock" status has not been yet reached					// So you migth have two order states					$new_history = new OrderHistory();					$new_history->id_order = (int)$order->id;				//quitada por la 1.5.2	$new_history->changeIdOrderState((int)$id_order_state, (int)$order->id, true);					$new_history->changeIdOrderState((int)$id_order_state, $order, true);					$new_history->addWithemail(true, $extra_vars);					unset($order_detail);					// Order is reloaded because the status just changed					$order = new Order($order->id);					// Send an e-mail to customer (one order = one email)					if ($id_order_state != Configuration::get('PS_OS_ERROR') && $id_order_state != Configuration::get('PS_OS_CANCELED') && $this->context->customer->id)					{						$invoice = new Address($order->id_address_invoice);						$delivery = new Address($order->id_address_delivery);						$delivery_state = $delivery->id_state ? new State($delivery->id_state) : false;						$invoice_state = $invoice->id_state ? new State($invoice->id_state) : false;						$data = array(						'{firstname}' => $this->context->customer->firstname,						'{lastname}' => $this->context->customer->lastname,						'{email}' => $this->context->customer->email,						'{delivery_block_txt}' => $this->_getFormatedAddress($delivery, "\n"),						'{invoice_block_txt}' => $this->_getFormatedAddress($invoice, "\n"),						'{delivery_block_html}' => $this->_getFormatedAddress($delivery, '<br />', array(							'firstname'	=> '<span style="color:#DB3484; font-weight:bold;">%s</span>',							'lastname'	=> '<span style="color:#DB3484; font-weight:bold;">%s</span>'						)),						'{invoice_block_html}' => $this->_getFormatedAddress($invoice, '<br />', array(								'firstname'	=> '<span style="color:#DB3484; font-weight:bold;">%s</span>',								'lastname'	=> '<span style="color:#DB3484; font-weight:bold;">%s</span>'						)),						'{delivery_company}' => $delivery->company,						'{delivery_firstname}' => $delivery->firstname,						'{delivery_lastname}' => $delivery->lastname,						'{delivery_address1}' => $delivery->address1,						'{delivery_address2}' => $delivery->address2,						'{delivery_city}' => $delivery->city,						'{delivery_postal_code}' => $delivery->postcode,						'{delivery_country}' => $delivery->country,						'{delivery_state}' => $delivery->id_state ? $delivery_state->name : '',						'{delivery_phone}' => ($delivery->phone) ? $delivery->phone : $delivery->phone_mobile,						'{delivery_other}' => $delivery->other,						'{invoice_company}' => $invoice->company,						'{invoice_vat_number}' => $invoice->vat_number,						'{invoice_firstname}' => $invoice->firstname,						'{invoice_lastname}' => $invoice->lastname,						'{invoice_address2}' => $invoice->address2,						'{invoice_address1}' => $invoice->address1,						'{invoice_city}' => $invoice->city,						'{invoice_postal_code}' => $invoice->postcode,						'{invoice_country}' => $invoice->country,						'{invoice_state}' => $invoice->id_state ? $invoice_state->name : '',						'{invoice_phone}' => ($invoice->phone) ? $invoice->phone : $invoice->phone_mobile,						'{invoice_other}' => $invoice->other,						'{order_name}' => $order->getUniqReference(),						'{date}' => Tools::displayDate(date('Y-m-d H:i:s'), (int)$order->id_lang, 1),						'{carrier}' => $virtual_product ? Tools::displayError('No carrier') : $carrier->name,						'{payment}' => Tools::substr($order->payment, 0, 32),						'{products}' => $this->formatProductAndVoucherForEmail($products_list),						'{discounts}' => $this->formatProductAndVoucherForEmail($cart_rules_list),						'{total_paid}' => Tools::displayPrice($order->total_paid, $this->context->currency, false),						'{total_products}' => Tools::displayPrice($order->total_paid - $order->total_shipping - $order->total_wrapping + $order->total_discounts, $this->context->currency, false),						'{total_discounts}' => Tools::displayPrice($order->total_discounts, $this->context->currency, false),						'{total_shipping}' => Tools::displayPrice($order->total_shipping, $this->context->currency, false),						'{total_wrapping}' => Tools::displayPrice($order->total_wrapping, $this->context->currency, false),										'{total_tax_paid}' => Tools::displayPrice(($order->total_products_wt - $order->total_products) + ($order->total_shipping_tax_incl - $order->total_shipping_tax_excl), $this->context->currency, false));					if (is_array($extra_vars))							$data = array_merge($data, $extra_vars);						// Join PDF invoice						if ((int)Configuration::get('PS_INVOICE') && $order_status->invoice && $order->invoice_number)						{							$pdf = new PDF($order->getInvoicesCollection(), PDF::TEMPLATE_INVOICE, $this->context->smarty);							$file_attachement['content'] = $pdf->render(false);							$file_attachement['name'] = Configuration::get('PS_INVOICE_PREFIX', (int)$order->id_lang).sprintf('%06d', $order->invoice_number).'.pdf';							$file_attachement['mime'] = 'application/pdf';						}						else							$file_attachement = null;						if (Validate::isEmail($this->context->customer->email))							Mail::Send(								(int)$order->id_lang,								'order_conf',								Mail::l('Order confirmation', (int)$order->id_lang),								$data,								$this->context->customer->email,								$this->context->customer->firstname.' '.$this->context->customer->lastname,								null,								null,								$file_attachement,								null, _PS_MAIL_DIR_, false, (int)$order->id_shop							);					}					// updates stock in shops					if (Configuration::get('PS_ADVANCED_STOCK_MANAGEMENT'))					{						$product_list = $order->getProducts();						foreach ($product_list as $product)						{							// if the available quantities depends on the physical stock							if (StockAvailable::dependsOnStock($product['product_id']))							{								// synchronizes								StockAvailable::synchronize($product['product_id'], $order->id_shop);							}						}					}				}				else				{					$error = Tools::displayError('Order creation failed');					Logger::addLog($error, 4, '0000002', 'Cart', intval($order->id_cart));					die($error);				}			} // End foreach $order_detail_list			// Update Order Details Tax in case cart rules have free shipping			foreach ($order->getOrderDetailList() as $detail)			{				$order_detail = new OrderDetail($detail['id_order_detail']);				$order_detail->updateTaxAmount($order);			}			// Use the last order as currentOrder			if (isset($order) && $order->id)				$this->currentOrder = (int)$order->id;			return true;		}		else		{			$error = Tools::displayError('Cart cannot be loaded or an order has already been placed using this cart');			Logger::addLog($error, 4, '0000001', 'Cart', intval($this->context->cart->id));			die($error);		}	}		protected function _getFormatedAddress(Address $the_address, $line_sep, $fields_style = array())	{		return AddressFormat::generateAddress($the_address, array('avoid' => array()), $line_sep, ' ', $fields_style);	}		public function hookdisplayOrderDetail($param)	{				$order = $param['order'];		if(isset($order) && $order->payment_fee!=0 && $order->module == 'paypal')		{			$html = '';				$html .= '<br />			<div class="table_block">			<table class="std">				<thead>				<tr>				<th><img alt="'.$this->l('Connexion').'" src="'.$this->_path.'logo.gif"/> '.$this->l('Paypal fee').'</th>				</tr>				</thead>				<tbody>				<tr>				<td>'.$this->l('Fee applied for Paypal:').':&nbsp;<span style="color:red">'.Tools::displayPrice($order->payment_fee). '</span></td>				<tr>				</tbody>			</table>			</div>';            return $html;		}	}		public function hookOrderDetailDisplayed($param)	{				$order = $param['order'];		if(isset($order) && $order->payment_fee!=0 && $order->module == 'paypal')		{			$html = '';				$html .= '<br />			<ul>			<li><img alt="'.$this->l('Connexion').'" src="'.$this->_path.'logo.gif"/> '.$this->l('Paypal fee').'</li>			<li>'.$this->l('Fee applied for Paypal:').':&nbsp;<span style="color:red">'.Tools::displayPrice($order->payment_fee). '</span></li>			</ul>';            return $html;		}	}	//Return the fee cost    public function getCost($cart)    {    	// Get total order    	$cartvalue = floatval($cart->getOrderTotal(true, 3));		$fee = 0;    	        $percent = floatval(Configuration::get('PAYPAL_PCTFEE'));        $percent = $percent / 100;				if(isset($percent) && $percent != 0) {			$fee = $cartvalue * $percent;        }				$fee = $fee + floatval(Configuration::get('PAYPAL_FEE'));			        return floatval($fee);    }		public function translation_fee_text()	{		return $this->l('Administration fees');	}		public function checkInstall()	{		if(!$this->checkFile(_PS_ROOT_DIR_.'/override/classes/order/Order.php','payment_fee'))			$this->warning = $this->l('Order.php override is missing. Please click here for more info');		if(!(bool)Configuration::get('PAYPAL_API_USER') && !(bool)Configuration::get('PAYPAL_API_PASSWORD') && !(bool)Configuration::get('PAYPAL_API_SIGNATURE'))			$this->warning = $this->l('Account details must be configured before using this module.');		if($id_hook = Hook::getIdByName('footer'))			if(!Hook::getModulesFromHook($id_hook,$this->id))				$this->warning = $this->l('Please click here for details (hookFooter)');		if(!Db::getInstance()->executeS('SHOW COLUMNS FROM '._DB_PREFIX_.'orders LIKE "payment_fee"'))			$this->warning = $this->l('IMPORTANT! Please click here for details (columns in database)');		return true;	}		public function display_aw_error()	{		return $this->l('API data is not correct. Contact vendor reporting this message. You can learn how to properly configure the API data ')				.'<a href="http://www.alabazweb.com/es/blog/24-configurar-los-datos-del-api-de-paypal" target="_blank">'.$this->l('here').'</a>';	}}